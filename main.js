(()=>{"use strict";var e={208:(e,t,n)=>{n.d(t,{A:()=>h});var r=n(354),i=n.n(r),s=n(314),o=n.n(s),a=n(417),u=n.n(a),c=new URL(n(565),n.b),l=o()(i());l.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Libre+Baskerville:ital,wght@0,400;0,700;1,400&family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap);"]);var d=u()(c);l.push([e.id,`*{\n    margin: 0px;\n    padding: 0px;\n    box-sizing: border-box;\n}\n\n\nbody{\n   background-color: transparent;\n   font-family: 'Nunito', sans-serif;\n}\n\n#background-pic{\n    position: fixed;\n    z-index: -1;\n    background-color: black;\n    height: 100%;\n    top: 0;\n    left: 0;\n    width: 100%;\n    -webkit-object-fit: cover;\n    object-fit: cover;\n    -webkit-object-position: center;\n    object-position: center;\n    filter: blur(2px);\n}\n\n.loading-icon{\n    position: absolute;\n    display: none;\n    width: 100px;\n    height: 100px;\n    z-index: 1;\n    top: 45%;\n    left: 50%;\n    transform: translate(-50%, -50%)\n}\n\nform{\n    display: flex;\n    color: white;\n    justify-content: center;\n    align-items: center;\n    font-size: 40px;\n    gap: 10px;\n    height: 60px;\n}\n\ninput#search{\n    width: 40%;\n    border: 1px solid white;\n    color: white;\n    height: 62%;\n    font-size: 18px;\n    text-align: center;\n    border-radius: 18px;\n    background-color: transparent;\n}\n#submit-btn{\n    background-image: url(${d});\n    background-repeat: no-repeat;\n    background-size: 100%;\n    width: 32px;\n    height: 32px;\n    border: none;\n    background-color: transparent;\n}\n\ninput#search::placeholder{color: white;}\n\n#unit-change{\n    padding: 7px 11px;\n    font-size: 18px;\n    background-color: transparent;\n    color: white;\n    border: 1px solid white;\n    border-radius: 18px;\n\n}\n\n\n.info-container{\n    display: none;\n    flex-direction: column;\n    align-items: center;\n    width: 80%;\n    margin: 0px auto;\n    color: white;\n    font-size: 1.3em;\n    margin-top: 2% ;\n}\n\n.toggle{\n    display: flex;\n}\n\n#location{\n    font-size: 3em;\n}\n\n.temp-container{\n    display: flex;\n    font-size: 60px;\n    gap: 5px;\n    \n}\n\n#temp-icon{\n    height: 55px;\n    position: relative;\n    top: 20px;\n}\n\n.condition-container{\n    display: flex;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n}\n\n.wind-container{\n    display: flex;\n    align-items: center;\n    gap: 10px;\n}\n\n.today-forecast, .week-forecast{\n    display: flex;\n    justify-content: center;\n    gap: 25px;\n    width: min(100%, 1150px);\n    margin: 25px 0px;\n    flex-wrap: wrap;\n}\n\n.week-forecast{    \n    border-top: 1px solid white;\n    padding-top: 50px;\n    max-width: 1000px;\n}\n\n.hour-forecast, .day-forecast-container{\n    width: max(130px, 16%);\n    text-align: center;\n    font-size: 1.5em;\n}\n\n.temp-hour-container, .temp-low-day-container, .temp-high-day-container{\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    gap: 5px;\n}\n\n.temp-hour-container img, #circle-degree{\n    width: 15px;\n    height: 15px;\n}\n\n.day-forecast-container{\n    width: max(233px, 25%);\n}\n\n.temp-day-container{\n    display: flex;\n    gap: 15px;\n    justify-content: center;\n}\n\n.temp-low-day-container, .temp-high-day-container{\n    align-items: center;\n    width: fit-content;\n}\n\n.temp-low-day-container img, .temp-high-day-container img{\n    width: 25px;\n    height: 25px;\n}\n\n#circle-degree{\n    position: relative;\n    bottom: 10px;\n}\n\n\n@media only screen and (max-width: 960px) {\n\n    *{font-size: 0.94em;}\n    img{height: 50px;}\n    form{\n        width: 90%; margin: 0px auto;\n    }\n    input#search{\n        font-size: 14px; width: 65%;\n    }\n    #unit-change{\n        font-size: 14px;\n        width: 20%;\n        padding: 7px 5px;\n    }\n    #location{font-size: 2.50em; text-align: center;}\n    #current-time{font-size: 1.50em;}\n    #temp-icon{\n        top: 10px;\n        right: 5px;\n        height: 40px;\n    }\n    #condition, .wind-container{font-size: 1.5em;}\n    .wind-container img{height: 33px;}\n    .today-forecast, .week-forecast{\n        flex-direction: column;\n        margin:  25px 0px 0px 0px;\n        gap: 18px;\n    }\n    .hour-forecast, .day-forecast-container{\n        display: flex;\n        justify-content: center;\n        width: 100%;\n        align-items: center;\n    }\n\n    .time-forecast, .day-forecast{text-align: left;}\n    .week-forecast{padding: 27px 0px;}\n    .day-forecast-container{margin-bottom: 15px;}\n    .temp-hour-container{width: fit-content;}\n    .hour-condition-icon{margin: 0px 7px 0px auto;}\n    .temp-day-container{flex-direction: column-reverse;}\n\n\n}`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAGA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;AAC1B;;;AAGA;GACG,6BAA6B;GAC7B,iCAAiC;AACpC;;AAEA;IACI,eAAe;IACf,WAAW;IACX,uBAAuB;IACvB,YAAY;IACZ,MAAM;IACN,OAAO;IACP,WAAW;IACX,yBAAyB;IACzB,iBAAiB;IACjB,+BAA+B;IAC/B,uBAAuB;IACvB,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,YAAY;IACZ,aAAa;IACb,UAAU;IACV,QAAQ;IACR,SAAS;IACT;AACJ;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,uBAAuB;IACvB,mBAAmB;IACnB,eAAe;IACf,SAAS;IACT,YAAY;AAChB;;AAEA;IACI,UAAU;IACV,uBAAuB;IACvB,YAAY;IACZ,WAAW;IACX,eAAe;IACf,kBAAkB;IAClB,mBAAmB;IACnB,6BAA6B;AACjC;AACA;IACI,yDAA8C;IAC9C,4BAA4B;IAC5B,qBAAqB;IACrB,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,6BAA6B;AACjC;;AAEA,0BAA0B,YAAY,CAAC;;AAEvC;IACI,iBAAiB;IACjB,eAAe;IACf,6BAA6B;IAC7B,YAAY;IACZ,uBAAuB;IACvB,mBAAmB;;AAEvB;;;AAGA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,UAAU;IACV,gBAAgB;IAChB,YAAY;IACZ,gBAAgB;IAChB,eAAe;AACnB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,eAAe;IACf,QAAQ;;AAEZ;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,WAAW;IACX,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,SAAS;IACT,wBAAwB;IACxB,gBAAgB;IAChB,eAAe;AACnB;;AAEA;IACI,2BAA2B;IAC3B,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,sBAAsB;IACtB,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,WAAW;IACX,QAAQ;AACZ;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,SAAS;IACT,uBAAuB;AAC3B;;AAEA;IACI,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,YAAY;AAChB;;;AAGA;;IAEI,EAAE,iBAAiB,CAAC;IACpB,IAAI,YAAY,CAAC;IACjB;QACI,UAAU,EAAE,gBAAgB;IAChC;IACA;QACI,eAAe,EAAE,UAAU;IAC/B;IACA;QACI,eAAe;QACf,UAAU;QACV,gBAAgB;IACpB;IACA,UAAU,iBAAiB,EAAE,kBAAkB,CAAC;IAChD,cAAc,iBAAiB,CAAC;IAChC;QACI,SAAS;QACT,UAAU;QACV,YAAY;IAChB;IACA,4BAA4B,gBAAgB,CAAC;IAC7C,oBAAoB,YAAY,CAAC;IACjC;QACI,sBAAsB;QACtB,yBAAyB;QACzB,SAAS;IACb;IACA;QACI,aAAa;QACb,uBAAuB;QACvB,WAAW;QACX,mBAAmB;IACvB;;IAEA,8BAA8B,gBAAgB,CAAC;IAC/C,eAAe,iBAAiB,CAAC;IACjC,wBAAwB,mBAAmB,CAAC;IAC5C,qBAAqB,kBAAkB,CAAC;IACxC,qBAAqB,wBAAwB,CAAC;IAC9C,oBAAoB,8BAA8B,CAAC;;;AAGvD",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Libre+Baskerville:ital,wght@0,400;0,700;1,400&family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap');\n\n\n*{\n    margin: 0px;\n    padding: 0px;\n    box-sizing: border-box;\n}\n\n\nbody{\n   background-color: transparent;\n   font-family: 'Nunito', sans-serif;\n}\n\n#background-pic{\n    position: fixed;\n    z-index: -1;\n    background-color: black;\n    height: 100%;\n    top: 0;\n    left: 0;\n    width: 100%;\n    -webkit-object-fit: cover;\n    object-fit: cover;\n    -webkit-object-position: center;\n    object-position: center;\n    filter: blur(2px);\n}\n\n.loading-icon{\n    position: absolute;\n    display: none;\n    width: 100px;\n    height: 100px;\n    z-index: 1;\n    top: 45%;\n    left: 50%;\n    transform: translate(-50%, -50%)\n}\n\nform{\n    display: flex;\n    color: white;\n    justify-content: center;\n    align-items: center;\n    font-size: 40px;\n    gap: 10px;\n    height: 60px;\n}\n\ninput#search{\n    width: 40%;\n    border: 1px solid white;\n    color: white;\n    height: 62%;\n    font-size: 18px;\n    text-align: center;\n    border-radius: 18px;\n    background-color: transparent;\n}\n#submit-btn{\n    background-image: url('/dist/img/magnify.svg');\n    background-repeat: no-repeat;\n    background-size: 100%;\n    width: 32px;\n    height: 32px;\n    border: none;\n    background-color: transparent;\n}\n\ninput#search::placeholder{color: white;}\n\n#unit-change{\n    padding: 7px 11px;\n    font-size: 18px;\n    background-color: transparent;\n    color: white;\n    border: 1px solid white;\n    border-radius: 18px;\n\n}\n\n\n.info-container{\n    display: none;\n    flex-direction: column;\n    align-items: center;\n    width: 80%;\n    margin: 0px auto;\n    color: white;\n    font-size: 1.3em;\n    margin-top: 2% ;\n}\n\n.toggle{\n    display: flex;\n}\n\n#location{\n    font-size: 3em;\n}\n\n.temp-container{\n    display: flex;\n    font-size: 60px;\n    gap: 5px;\n    \n}\n\n#temp-icon{\n    height: 55px;\n    position: relative;\n    top: 20px;\n}\n\n.condition-container{\n    display: flex;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n}\n\n.wind-container{\n    display: flex;\n    align-items: center;\n    gap: 10px;\n}\n\n.today-forecast, .week-forecast{\n    display: flex;\n    justify-content: center;\n    gap: 25px;\n    width: min(100%, 1150px);\n    margin: 25px 0px;\n    flex-wrap: wrap;\n}\n\n.week-forecast{    \n    border-top: 1px solid white;\n    padding-top: 50px;\n    max-width: 1000px;\n}\n\n.hour-forecast, .day-forecast-container{\n    width: max(130px, 16%);\n    text-align: center;\n    font-size: 1.5em;\n}\n\n.temp-hour-container, .temp-low-day-container, .temp-high-day-container{\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    gap: 5px;\n}\n\n.temp-hour-container img, #circle-degree{\n    width: 15px;\n    height: 15px;\n}\n\n.day-forecast-container{\n    width: max(233px, 25%);\n}\n\n.temp-day-container{\n    display: flex;\n    gap: 15px;\n    justify-content: center;\n}\n\n.temp-low-day-container, .temp-high-day-container{\n    align-items: center;\n    width: fit-content;\n}\n\n.temp-low-day-container img, .temp-high-day-container img{\n    width: 25px;\n    height: 25px;\n}\n\n#circle-degree{\n    position: relative;\n    bottom: 10px;\n}\n\n\n@media only screen and (max-width: 960px) {\n\n    *{font-size: 0.94em;}\n    img{height: 50px;}\n    form{\n        width: 90%; margin: 0px auto;\n    }\n    input#search{\n        font-size: 14px; width: 65%;\n    }\n    #unit-change{\n        font-size: 14px;\n        width: 20%;\n        padding: 7px 5px;\n    }\n    #location{font-size: 2.50em; text-align: center;}\n    #current-time{font-size: 1.50em;}\n    #temp-icon{\n        top: 10px;\n        right: 5px;\n        height: 40px;\n    }\n    #condition, .wind-container{font-size: 1.5em;}\n    .wind-container img{height: 33px;}\n    .today-forecast, .week-forecast{\n        flex-direction: column;\n        margin:  25px 0px 0px 0px;\n        gap: 18px;\n    }\n    .hour-forecast, .day-forecast-container{\n        display: flex;\n        justify-content: center;\n        width: 100%;\n        align-items: center;\n    }\n\n    .time-forecast, .day-forecast{text-align: left;}\n    .week-forecast{padding: 27px 0px;}\n    .day-forecast-container{margin-bottom: 15px;}\n    .temp-hour-container{width: fit-content;}\n    .hour-condition-icon{margin: 0px 7px 0px auto;}\n    .temp-day-container{flex-direction: column-reverse;}\n\n\n}"],sourceRoot:""}]);const h=l},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,s){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var a=0;a<this.length;a++){var u=this[a][0];null!=u&&(o[u]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);r&&o[l[0]]||(void 0!==s&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=s),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),t.push(l))}},t}},417:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(i," */");return[t].concat([s]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var s={},o=[],a=0;a<e.length;a++){var u=e[a],c=r.base?u[0]+r.base:u[0],l=s[c]||0,d="".concat(c," ").concat(l);s[c]=l+1;var h=n(d),m={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==h)t[h].references++,t[h].updater(m);else{var f=i(m,r);r.byIndex=a,t.splice(a,0,{identifier:d,updater:f,references:1})}o.push(d)}return o}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var s=r(e=e||[],i=i||{});return function(e){e=e||[];for(var o=0;o<s.length;o++){var a=n(s[o]);t[a].references--}for(var u=r(e,i),c=0;c<s.length;c++){var l=n(s[c]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}s=u}}},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},565:(e,t,n)=>{e.exports=n.p+"bd295287d57bda5c4a46.svg"}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var s=t[r]={id:r,exports:{}};return e[r](s,s.exports,n),s.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var i=r.length-1;i>-1&&(!e||!/^http(s?):/.test(e));)e=r[i--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0;var r={};(()=>{n.d(r,{l:()=>Dr});var e=n(72),t=n.n(e),i=n(825),s=n.n(i),o=n(659),a=n.n(o),u=n(56),c=n.n(u),l=n(540),d=n.n(l),h=n(113),m=n.n(h),f=n(208),y={};y.styleTagTransform=m(),y.setAttributes=c(),y.insert=a().bind(null,"head"),y.domAPI=s(),y.insertStyleElement=d(),t()(f.A,y),f.A&&f.A.locals&&f.A.locals;const p=n.p+"d51f1cefea30677d75b2.png",A=n.p+"4c82cbc02f5654230560.png";class g extends Error{}class w extends g{constructor(e){super(`Invalid DateTime: ${e.toMessage()}`)}}class C extends g{constructor(e){super(`Invalid Interval: ${e.toMessage()}`)}}class k extends g{constructor(e){super(`Invalid Duration: ${e.toMessage()}`)}}class x extends g{}class v extends g{constructor(e){super(`Invalid unit ${e}`)}}class b extends g{}class I extends g{constructor(){super("Zone is an abstract class")}}const S="numeric",T="short",O="long",B={year:S,month:S,day:S},N={year:S,month:T,day:S},E={year:S,month:T,day:S,weekday:T},M={year:S,month:O,day:S},D={year:S,month:O,day:S,weekday:O},V={hour:S,minute:S},W={hour:S,minute:S,second:S},z={hour:S,minute:S,second:S,timeZoneName:T},F={hour:S,minute:S,second:S,timeZoneName:O},Z={hour:S,minute:S,hourCycle:"h23"},L={hour:S,minute:S,second:S,hourCycle:"h23"},$={hour:S,minute:S,second:S,hourCycle:"h23",timeZoneName:T},j={hour:S,minute:S,second:S,hourCycle:"h23",timeZoneName:O},Y={year:S,month:S,day:S,hour:S,minute:S},q={year:S,month:S,day:S,hour:S,minute:S,second:S},U={year:S,month:T,day:S,hour:S,minute:S},_={year:S,month:T,day:S,hour:S,minute:S,second:S},H={year:S,month:T,day:S,weekday:T,hour:S,minute:S},R={year:S,month:O,day:S,hour:S,minute:S,timeZoneName:T},P={year:S,month:O,day:S,hour:S,minute:S,second:S,timeZoneName:T},J={year:S,month:O,day:S,weekday:O,hour:S,minute:S,timeZoneName:O},G={year:S,month:O,day:S,weekday:O,hour:S,minute:S,second:S,timeZoneName:O};class Q{get type(){throw new I}get name(){throw new I}get ianaName(){return this.name}get isUniversal(){throw new I}offsetName(e,t){throw new I}formatOffset(e,t){throw new I}offset(e){throw new I}equals(e){throw new I}get isValid(){throw new I}}let X=null;class K extends Q{static get instance(){return null===X&&(X=new K),X}get type(){return"system"}get name(){return(new Intl.DateTimeFormat).resolvedOptions().timeZone}get isUniversal(){return!1}offsetName(e,{format:t,locale:n}){return ht(e,t,n)}formatOffset(e,t){return pt(this.offset(e),t)}offset(e){return-new Date(e).getTimezoneOffset()}equals(e){return"system"===e.type}get isValid(){return!0}}let ee={};const te={year:0,month:1,day:2,era:3,hour:4,minute:5,second:6};let ne={};class re extends Q{static create(e){return ne[e]||(ne[e]=new re(e)),ne[e]}static resetCache(){ne={},ee={}}static isValidSpecifier(e){return this.isValidZone(e)}static isValidZone(e){if(!e)return!1;try{return new Intl.DateTimeFormat("en-US",{timeZone:e}).format(),!0}catch(e){return!1}}constructor(e){super(),this.zoneName=e,this.valid=re.isValidZone(e)}get type(){return"iana"}get name(){return this.zoneName}get isUniversal(){return!1}offsetName(e,{format:t,locale:n}){return ht(e,t,n,this.name)}formatOffset(e,t){return pt(this.offset(e),t)}offset(e){const t=new Date(e);if(isNaN(t))return NaN;const n=(r=this.name,ee[r]||(ee[r]=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:r,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",era:"short"})),ee[r]);var r;let[i,s,o,a,u,c,l]=n.formatToParts?function(e,t){const n=e.formatToParts(t),r=[];for(let e=0;e<n.length;e++){const{type:t,value:i}=n[e],s=te[t];"era"===t?r[s]=i:_e(s)||(r[s]=parseInt(i,10))}return r}(n,t):function(e,t){const n=e.format(t).replace(/\u200E/g,""),r=/(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(n),[,i,s,o,a,u,c,l]=r;return[o,i,s,a,u,c,l]}(n,t);"BC"===a&&(i=1-Math.abs(i));let d=+t;const h=d%1e3;return d-=h>=0?h:1e3+h,(ut({year:i,month:s,day:o,hour:24===u?0:u,minute:c,second:l,millisecond:0})-d)/6e4}equals(e){return"iana"===e.type&&e.name===this.name}get isValid(){return this.valid}}let ie={},se={};function oe(e,t={}){const n=JSON.stringify([e,t]);let r=se[n];return r||(r=new Intl.DateTimeFormat(e,t),se[n]=r),r}let ae={},ue={},ce=null,le={};function de(e,t,n,r){const i=e.listingMode();return"error"===i?null:"en"===i?n(t):r(t)}class he{constructor(e,t,n){this.padTo=n.padTo||0,this.floor=n.floor||!1;const{padTo:r,floor:i,...s}=n;if(!t||Object.keys(s).length>0){const t={useGrouping:!1,...n};n.padTo>0&&(t.minimumIntegerDigits=n.padTo),this.inf=function(e,t={}){const n=JSON.stringify([e,t]);let r=ae[n];return r||(r=new Intl.NumberFormat(e,t),ae[n]=r),r}(e,t)}}format(e){if(this.inf){const t=this.floor?Math.floor(e):e;return this.inf.format(t)}return et(this.floor?Math.floor(e):it(e,3),this.padTo)}}class me{constructor(e,t,n){let r;if(this.opts=n,this.originalZone=void 0,this.opts.timeZone)this.dt=e;else if("fixed"===e.zone.type){const t=e.offset/60*-1,n=t>=0?`Etc/GMT+${t}`:`Etc/GMT${t}`;0!==e.offset&&re.create(n).valid?(r=n,this.dt=e):(r="UTC",this.dt=0===e.offset?e:e.setZone("UTC").plus({minutes:e.offset}),this.originalZone=e.zone)}else"system"===e.zone.type?this.dt=e:"iana"===e.zone.type?(this.dt=e,r=e.zone.name):(r="UTC",this.dt=e.setZone("UTC").plus({minutes:e.offset}),this.originalZone=e.zone);const i={...this.opts};i.timeZone=i.timeZone||r,this.dtf=oe(t,i)}format(){return this.originalZone?this.formatToParts().map((({value:e})=>e)).join(""):this.dtf.format(this.dt.toJSDate())}formatToParts(){const e=this.dtf.formatToParts(this.dt.toJSDate());return this.originalZone?e.map((e=>{if("timeZoneName"===e.type){const t=this.originalZone.offsetName(this.dt.ts,{locale:this.dt.locale,format:this.opts.timeZoneName});return{...e,value:t}}return e})):e}resolvedOptions(){return this.dtf.resolvedOptions()}}class fe{constructor(e,t,n){this.opts={style:"long",...n},!t&&Pe()&&(this.rtf=function(e,t={}){const{base:n,...r}=t,i=JSON.stringify([e,r]);let s=ue[i];return s||(s=new Intl.RelativeTimeFormat(e,t),ue[i]=s),s}(e,n))}format(e,t){return this.rtf?this.rtf.format(e,t):function(e,t,n="always",r=!1){const i={years:["year","yr."],quarters:["quarter","qtr."],months:["month","mo."],weeks:["week","wk."],days:["day","day","days"],hours:["hour","hr."],minutes:["minute","min."],seconds:["second","sec."]},s=-1===["hours","minutes","seconds"].indexOf(e);if("auto"===n&&s){const n="days"===e;switch(t){case 1:return n?"tomorrow":`next ${i[e][0]}`;case-1:return n?"yesterday":`last ${i[e][0]}`;case 0:return n?"today":`this ${i[e][0]}`}}const o=Object.is(t,-0)||t<0,a=Math.abs(t),u=1===a,c=i[e],l=r?u?c[1]:c[2]||c[1]:u?i[e][0]:e;return o?`${a} ${l} ago`:`in ${a} ${l}`}(t,e,this.opts.numeric,"long"!==this.opts.style)}formatToParts(e,t){return this.rtf?this.rtf.formatToParts(e,t):[]}}const ye={firstDay:1,minimalDays:4,weekend:[6,7]};class pe{static fromOpts(e){return pe.create(e.locale,e.numberingSystem,e.outputCalendar,e.weekSettings,e.defaultToEN)}static create(e,t,n,r,i=!1){const s=e||Be.defaultLocale,o=s||(i?"en-US":ce||(ce=(new Intl.DateTimeFormat).resolvedOptions().locale,ce)),a=t||Be.defaultNumberingSystem,u=n||Be.defaultOutputCalendar,c=Xe(r)||Be.defaultWeekSettings;return new pe(o,a,u,c,s)}static resetCache(){ce=null,se={},ae={},ue={}}static fromObject({locale:e,numberingSystem:t,outputCalendar:n,weekSettings:r}={}){return pe.create(e,t,n,r)}constructor(e,t,n,r,i){const[s,o,a]=function(e){const t=e.indexOf("-x-");-1!==t&&(e=e.substring(0,t));const n=e.indexOf("-u-");if(-1===n)return[e];{let t,r;try{t=oe(e).resolvedOptions(),r=e}catch(i){const s=e.substring(0,n);t=oe(s).resolvedOptions(),r=s}const{numberingSystem:i,calendar:s}=t;return[r,i,s]}}(e);this.locale=s,this.numberingSystem=t||o||null,this.outputCalendar=n||a||null,this.weekSettings=r,this.intl=function(e,t,n){return n||t?(e.includes("-u-")||(e+="-u"),n&&(e+=`-ca-${n}`),t&&(e+=`-nu-${t}`),e):e}(this.locale,this.numberingSystem,this.outputCalendar),this.weekdaysCache={format:{},standalone:{}},this.monthsCache={format:{},standalone:{}},this.meridiemCache=null,this.eraCache={},this.specifiedLocale=i,this.fastNumbersCached=null}get fastNumbers(){var e;return null==this.fastNumbersCached&&(this.fastNumbersCached=(!(e=this).numberingSystem||"latn"===e.numberingSystem)&&("latn"===e.numberingSystem||!e.locale||e.locale.startsWith("en")||"latn"===new Intl.DateTimeFormat(e.intl).resolvedOptions().numberingSystem)),this.fastNumbersCached}listingMode(){const e=this.isEnglish(),t=!(null!==this.numberingSystem&&"latn"!==this.numberingSystem||null!==this.outputCalendar&&"gregory"!==this.outputCalendar);return e&&t?"en":"intl"}clone(e){return e&&0!==Object.getOwnPropertyNames(e).length?pe.create(e.locale||this.specifiedLocale,e.numberingSystem||this.numberingSystem,e.outputCalendar||this.outputCalendar,Xe(e.weekSettings)||this.weekSettings,e.defaultToEN||!1):this}redefaultToEN(e={}){return this.clone({...e,defaultToEN:!0})}redefaultToSystem(e={}){return this.clone({...e,defaultToEN:!1})}months(e,t=!1){return de(this,e,kt,(()=>{const n=t?{month:e,day:"numeric"}:{month:e},r=t?"format":"standalone";return this.monthsCache[r][e]||(this.monthsCache[r][e]=function(e){const t=[];for(let n=1;n<=12;n++){const r=vr.utc(2009,n,1);t.push(e(r))}return t}((e=>this.extract(e,n,"month")))),this.monthsCache[r][e]}))}weekdays(e,t=!1){return de(this,e,It,(()=>{const n=t?{weekday:e,year:"numeric",month:"long",day:"numeric"}:{weekday:e},r=t?"format":"standalone";return this.weekdaysCache[r][e]||(this.weekdaysCache[r][e]=function(e){const t=[];for(let n=1;n<=7;n++){const r=vr.utc(2016,11,13+n);t.push(e(r))}return t}((e=>this.extract(e,n,"weekday")))),this.weekdaysCache[r][e]}))}meridiems(){return de(this,void 0,(()=>St),(()=>{if(!this.meridiemCache){const e={hour:"numeric",hourCycle:"h12"};this.meridiemCache=[vr.utc(2016,11,13,9),vr.utc(2016,11,13,19)].map((t=>this.extract(t,e,"dayperiod")))}return this.meridiemCache}))}eras(e){return de(this,e,Nt,(()=>{const t={era:e};return this.eraCache[e]||(this.eraCache[e]=[vr.utc(-40,1,1),vr.utc(2017,1,1)].map((e=>this.extract(e,t,"era")))),this.eraCache[e]}))}extract(e,t,n){const r=this.dtFormatter(e,t).formatToParts().find((e=>e.type.toLowerCase()===n));return r?r.value:null}numberFormatter(e={}){return new he(this.intl,e.forceSimple||this.fastNumbers,e)}dtFormatter(e,t={}){return new me(e,this.intl,t)}relFormatter(e={}){return new fe(this.intl,this.isEnglish(),e)}listFormatter(e={}){return function(e,t={}){const n=JSON.stringify([e,t]);let r=ie[n];return r||(r=new Intl.ListFormat(e,t),ie[n]=r),r}(this.intl,e)}isEnglish(){return"en"===this.locale||"en-us"===this.locale.toLowerCase()||new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us")}getWeekSettings(){return this.weekSettings?this.weekSettings:Je()?function(e){let t=le[e];if(!t){const n=new Intl.Locale(e);t="getWeekInfo"in n?n.getWeekInfo():n.weekInfo,le[e]=t}return t}(this.locale):ye}getStartOfWeek(){return this.getWeekSettings().firstDay}getMinDaysInFirstWeek(){return this.getWeekSettings().minimalDays}getWeekendDays(){return this.getWeekSettings().weekend}equals(e){return this.locale===e.locale&&this.numberingSystem===e.numberingSystem&&this.outputCalendar===e.outputCalendar}}let Ae=null;class ge extends Q{static get utcInstance(){return null===Ae&&(Ae=new ge(0)),Ae}static instance(e){return 0===e?ge.utcInstance:new ge(e)}static parseSpecifier(e){if(e){const t=e.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);if(t)return new ge(mt(t[1],t[2]))}return null}constructor(e){super(),this.fixed=e}get type(){return"fixed"}get name(){return 0===this.fixed?"UTC":`UTC${pt(this.fixed,"narrow")}`}get ianaName(){return 0===this.fixed?"Etc/UTC":`Etc/GMT${pt(-this.fixed,"narrow")}`}offsetName(){return this.name}formatOffset(e,t){return pt(this.fixed,t)}get isUniversal(){return!0}offset(){return this.fixed}equals(e){return"fixed"===e.type&&e.fixed===this.fixed}get isValid(){return!0}}class we extends Q{constructor(e){super(),this.zoneName=e}get type(){return"invalid"}get name(){return this.zoneName}get isUniversal(){return!1}offsetName(){return null}formatOffset(){return""}offset(){return NaN}equals(){return!1}get isValid(){return!1}}function Ce(e,t){if(_e(e)||null===e)return t;if(e instanceof Q)return e;if("string"==typeof e){const n=e.toLowerCase();return"default"===n?t:"local"===n||"system"===n?K.instance:"utc"===n||"gmt"===n?ge.utcInstance:ge.parseSpecifier(n)||re.create(e)}return He(e)?ge.instance(e):"object"==typeof e&&"offset"in e&&"function"==typeof e.offset?e:new we(e)}let ke,xe=()=>Date.now(),ve="system",be=null,Ie=null,Se=null,Te=60,Oe=null;class Be{static get now(){return xe}static set now(e){xe=e}static set defaultZone(e){ve=e}static get defaultZone(){return Ce(ve,K.instance)}static get defaultLocale(){return be}static set defaultLocale(e){be=e}static get defaultNumberingSystem(){return Ie}static set defaultNumberingSystem(e){Ie=e}static get defaultOutputCalendar(){return Se}static set defaultOutputCalendar(e){Se=e}static get defaultWeekSettings(){return Oe}static set defaultWeekSettings(e){Oe=Xe(e)}static get twoDigitCutoffYear(){return Te}static set twoDigitCutoffYear(e){Te=e%100}static get throwOnInvalid(){return ke}static set throwOnInvalid(e){ke=e}static resetCaches(){pe.resetCache(),re.resetCache()}}class Ne{constructor(e,t){this.reason=e,this.explanation=t}toMessage(){return this.explanation?`${this.reason}: ${this.explanation}`:this.reason}}const Ee=[0,31,59,90,120,151,181,212,243,273,304,334],Me=[0,31,60,91,121,152,182,213,244,274,305,335];function De(e,t){return new Ne("unit out of range",`you specified ${t} (of type ${typeof t}) as a ${e}, which is invalid`)}function Ve(e,t,n){const r=new Date(Date.UTC(e,t-1,n));e<100&&e>=0&&r.setUTCFullYear(r.getUTCFullYear()-1900);const i=r.getUTCDay();return 0===i?7:i}function We(e,t,n){return n+(st(e)?Me:Ee)[t-1]}function ze(e,t){const n=st(e)?Me:Ee,r=n.findIndex((e=>e<t));return{month:r+1,day:t-n[r]}}function Fe(e,t){return(e-t+7)%7+1}function Ze(e,t=4,n=1){const{year:r,month:i,day:s}=e,o=We(r,i,s),a=Fe(Ve(r,i,s),n);let u,c=Math.floor((o-a+14-t)/7);return c<1?(u=r-1,c=lt(u,t,n)):c>lt(r,t,n)?(u=r+1,c=1):u=r,{weekYear:u,weekNumber:c,weekday:a,...At(e)}}function Le(e,t=4,n=1){const{weekYear:r,weekNumber:i,weekday:s}=e,o=Fe(Ve(r,1,t),n),a=ot(r);let u,c=7*i+s-o-7+t;c<1?(u=r-1,c+=ot(u)):c>a?(u=r+1,c-=ot(r)):u=r;const{month:l,day:d}=ze(u,c);return{year:u,month:l,day:d,...At(e)}}function $e(e){const{year:t,month:n,day:r}=e;return{year:t,ordinal:We(t,n,r),...At(e)}}function je(e){const{year:t,ordinal:n}=e,{month:r,day:i}=ze(t,n);return{year:t,month:r,day:i,...At(e)}}function Ye(e,t){if(!_e(e.localWeekday)||!_e(e.localWeekNumber)||!_e(e.localWeekYear)){if(!_e(e.weekday)||!_e(e.weekNumber)||!_e(e.weekYear))throw new x("Cannot mix locale-based week fields with ISO-based week fields");return _e(e.localWeekday)||(e.weekday=e.localWeekday),_e(e.localWeekNumber)||(e.weekNumber=e.localWeekNumber),_e(e.localWeekYear)||(e.weekYear=e.localWeekYear),delete e.localWeekday,delete e.localWeekNumber,delete e.localWeekYear,{minDaysInFirstWeek:t.getMinDaysInFirstWeek(),startOfWeek:t.getStartOfWeek()}}return{minDaysInFirstWeek:4,startOfWeek:1}}function qe(e){const t=Re(e.year),n=Ke(e.month,1,12),r=Ke(e.day,1,at(e.year,e.month));return t?n?!r&&De("day",e.day):De("month",e.month):De("year",e.year)}function Ue(e){const{hour:t,minute:n,second:r,millisecond:i}=e,s=Ke(t,0,23)||24===t&&0===n&&0===r&&0===i,o=Ke(n,0,59),a=Ke(r,0,59),u=Ke(i,0,999);return s?o?a?!u&&De("millisecond",i):De("second",r):De("minute",n):De("hour",t)}function _e(e){return void 0===e}function He(e){return"number"==typeof e}function Re(e){return"number"==typeof e&&e%1==0}function Pe(){try{return"undefined"!=typeof Intl&&!!Intl.RelativeTimeFormat}catch(e){return!1}}function Je(){try{return"undefined"!=typeof Intl&&!!Intl.Locale&&("weekInfo"in Intl.Locale.prototype||"getWeekInfo"in Intl.Locale.prototype)}catch(e){return!1}}function Ge(e,t,n){if(0!==e.length)return e.reduce(((e,r)=>{const i=[t(r),r];return e&&n(e[0],i[0])===e[0]?e:i}),null)[1]}function Qe(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function Xe(e){if(null==e)return null;if("object"!=typeof e)throw new b("Week settings must be an object");if(!Ke(e.firstDay,1,7)||!Ke(e.minimalDays,1,7)||!Array.isArray(e.weekend)||e.weekend.some((e=>!Ke(e,1,7))))throw new b("Invalid week settings");return{firstDay:e.firstDay,minimalDays:e.minimalDays,weekend:Array.from(e.weekend)}}function Ke(e,t,n){return Re(e)&&e>=t&&e<=n}function et(e,t=2){let n;return n=e<0?"-"+(""+-e).padStart(t,"0"):(""+e).padStart(t,"0"),n}function tt(e){return _e(e)||null===e||""===e?void 0:parseInt(e,10)}function nt(e){return _e(e)||null===e||""===e?void 0:parseFloat(e)}function rt(e){if(!_e(e)&&null!==e&&""!==e){const t=1e3*parseFloat("0."+e);return Math.floor(t)}}function it(e,t,n=!1){const r=10**t;return(n?Math.trunc:Math.round)(e*r)/r}function st(e){return e%4==0&&(e%100!=0||e%400==0)}function ot(e){return st(e)?366:365}function at(e,t){const n=(r=t-1)-12*Math.floor(r/12)+1;var r;return 2===n?st(e+(t-n)/12)?29:28:[31,null,31,30,31,30,31,31,30,31,30,31][n-1]}function ut(e){let t=Date.UTC(e.year,e.month-1,e.day,e.hour,e.minute,e.second,e.millisecond);return e.year<100&&e.year>=0&&(t=new Date(t),t.setUTCFullYear(e.year,e.month-1,e.day)),+t}function ct(e,t,n){return-Fe(Ve(e,1,t),n)+t-1}function lt(e,t=4,n=1){const r=ct(e,t,n),i=ct(e+1,t,n);return(ot(e)-r+i)/7}function dt(e){return e>99?e:e>Be.twoDigitCutoffYear?1900+e:2e3+e}function ht(e,t,n,r=null){const i=new Date(e),s={hourCycle:"h23",year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit"};r&&(s.timeZone=r);const o={timeZoneName:t,...s},a=new Intl.DateTimeFormat(n,o).formatToParts(i).find((e=>"timezonename"===e.type.toLowerCase()));return a?a.value:null}function mt(e,t){let n=parseInt(e,10);Number.isNaN(n)&&(n=0);const r=parseInt(t,10)||0;return 60*n+(n<0||Object.is(n,-0)?-r:r)}function ft(e){const t=Number(e);if("boolean"==typeof e||""===e||Number.isNaN(t))throw new b(`Invalid unit value ${e}`);return t}function yt(e,t){const n={};for(const r in e)if(Qe(e,r)){const i=e[r];if(null==i)continue;n[t(r)]=ft(i)}return n}function pt(e,t){const n=Math.trunc(Math.abs(e/60)),r=Math.trunc(Math.abs(e%60)),i=e>=0?"+":"-";switch(t){case"short":return`${i}${et(n,2)}:${et(r,2)}`;case"narrow":return`${i}${n}${r>0?`:${r}`:""}`;case"techie":return`${i}${et(n,2)}${et(r,2)}`;default:throw new RangeError(`Value format ${t} is out of range for property format`)}}function At(e){return function(e,t){return["hour","minute","second","millisecond"].reduce(((t,n)=>(t[n]=e[n],t)),{})}(e)}const gt=["January","February","March","April","May","June","July","August","September","October","November","December"],wt=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],Ct=["J","F","M","A","M","J","J","A","S","O","N","D"];function kt(e){switch(e){case"narrow":return[...Ct];case"short":return[...wt];case"long":return[...gt];case"numeric":return["1","2","3","4","5","6","7","8","9","10","11","12"];case"2-digit":return["01","02","03","04","05","06","07","08","09","10","11","12"];default:return null}}const xt=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],vt=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"],bt=["M","T","W","T","F","S","S"];function It(e){switch(e){case"narrow":return[...bt];case"short":return[...vt];case"long":return[...xt];case"numeric":return["1","2","3","4","5","6","7"];default:return null}}const St=["AM","PM"],Tt=["Before Christ","Anno Domini"],Ot=["BC","AD"],Bt=["B","A"];function Nt(e){switch(e){case"narrow":return[...Bt];case"short":return[...Ot];case"long":return[...Tt];default:return null}}function Et(e,t){let n="";for(const r of e)r.literal?n+=r.val:n+=t(r.val);return n}const Mt={D:B,DD:N,DDD:M,DDDD:D,t:V,tt:W,ttt:z,tttt:F,T:Z,TT:L,TTT:$,TTTT:j,f:Y,ff:U,fff:R,ffff:J,F:q,FF:_,FFF:P,FFFF:G};class Dt{static create(e,t={}){return new Dt(e,t)}static parseFormat(e){let t=null,n="",r=!1;const i=[];for(let s=0;s<e.length;s++){const o=e.charAt(s);"'"===o?(n.length>0&&i.push({literal:r||/^\s+$/.test(n),val:n}),t=null,n="",r=!r):r||o===t?n+=o:(n.length>0&&i.push({literal:/^\s+$/.test(n),val:n}),n=o,t=o)}return n.length>0&&i.push({literal:r||/^\s+$/.test(n),val:n}),i}static macroTokenToFormatOpts(e){return Mt[e]}constructor(e,t){this.opts=t,this.loc=e,this.systemLoc=null}formatWithSystemDefault(e,t){return null===this.systemLoc&&(this.systemLoc=this.loc.redefaultToSystem()),this.systemLoc.dtFormatter(e,{...this.opts,...t}).format()}dtFormatter(e,t={}){return this.loc.dtFormatter(e,{...this.opts,...t})}formatDateTime(e,t){return this.dtFormatter(e,t).format()}formatDateTimeParts(e,t){return this.dtFormatter(e,t).formatToParts()}formatInterval(e,t){return this.dtFormatter(e.start,t).dtf.formatRange(e.start.toJSDate(),e.end.toJSDate())}resolvedOptions(e,t){return this.dtFormatter(e,t).resolvedOptions()}num(e,t=0){if(this.opts.forceSimple)return et(e,t);const n={...this.opts};return t>0&&(n.padTo=t),this.loc.numberFormatter(n).format(e)}formatDateTimeFromString(e,t){const n="en"===this.loc.listingMode(),r=this.loc.outputCalendar&&"gregory"!==this.loc.outputCalendar,i=(t,n)=>this.loc.extract(e,t,n),s=t=>e.isOffsetFixed&&0===e.offset&&t.allowZ?"Z":e.isValid?e.zone.formatOffset(e.ts,t.format):"",o=(t,r)=>n?function(e,t){return kt(t)[e.month-1]}(e,t):i(r?{month:t}:{month:t,day:"numeric"},"month"),a=(t,r)=>n?function(e,t){return It(t)[e.weekday-1]}(e,t):i(r?{weekday:t}:{weekday:t,month:"long",day:"numeric"},"weekday"),u=t=>{const n=Dt.macroTokenToFormatOpts(t);return n?this.formatWithSystemDefault(e,n):t},c=t=>n?function(e,t){return Nt(t)[e.year<0?0:1]}(e,t):i({era:t},"era");return Et(Dt.parseFormat(t),(t=>{switch(t){case"S":return this.num(e.millisecond);case"u":case"SSS":return this.num(e.millisecond,3);case"s":return this.num(e.second);case"ss":return this.num(e.second,2);case"uu":return this.num(Math.floor(e.millisecond/10),2);case"uuu":return this.num(Math.floor(e.millisecond/100));case"m":return this.num(e.minute);case"mm":return this.num(e.minute,2);case"h":return this.num(e.hour%12==0?12:e.hour%12);case"hh":return this.num(e.hour%12==0?12:e.hour%12,2);case"H":return this.num(e.hour);case"HH":return this.num(e.hour,2);case"Z":return s({format:"narrow",allowZ:this.opts.allowZ});case"ZZ":return s({format:"short",allowZ:this.opts.allowZ});case"ZZZ":return s({format:"techie",allowZ:this.opts.allowZ});case"ZZZZ":return e.zone.offsetName(e.ts,{format:"short",locale:this.loc.locale});case"ZZZZZ":return e.zone.offsetName(e.ts,{format:"long",locale:this.loc.locale});case"z":return e.zoneName;case"a":return n?function(e){return St[e.hour<12?0:1]}(e):i({hour:"numeric",hourCycle:"h12"},"dayperiod");case"d":return r?i({day:"numeric"},"day"):this.num(e.day);case"dd":return r?i({day:"2-digit"},"day"):this.num(e.day,2);case"c":case"E":return this.num(e.weekday);case"ccc":return a("short",!0);case"cccc":return a("long",!0);case"ccccc":return a("narrow",!0);case"EEE":return a("short",!1);case"EEEE":return a("long",!1);case"EEEEE":return a("narrow",!1);case"L":return r?i({month:"numeric",day:"numeric"},"month"):this.num(e.month);case"LL":return r?i({month:"2-digit",day:"numeric"},"month"):this.num(e.month,2);case"LLL":return o("short",!0);case"LLLL":return o("long",!0);case"LLLLL":return o("narrow",!0);case"M":return r?i({month:"numeric"},"month"):this.num(e.month);case"MM":return r?i({month:"2-digit"},"month"):this.num(e.month,2);case"MMM":return o("short",!1);case"MMMM":return o("long",!1);case"MMMMM":return o("narrow",!1);case"y":return r?i({year:"numeric"},"year"):this.num(e.year);case"yy":return r?i({year:"2-digit"},"year"):this.num(e.year.toString().slice(-2),2);case"yyyy":return r?i({year:"numeric"},"year"):this.num(e.year,4);case"yyyyyy":return r?i({year:"numeric"},"year"):this.num(e.year,6);case"G":return c("short");case"GG":return c("long");case"GGGGG":return c("narrow");case"kk":return this.num(e.weekYear.toString().slice(-2),2);case"kkkk":return this.num(e.weekYear,4);case"W":return this.num(e.weekNumber);case"WW":return this.num(e.weekNumber,2);case"n":return this.num(e.localWeekNumber);case"nn":return this.num(e.localWeekNumber,2);case"ii":return this.num(e.localWeekYear.toString().slice(-2),2);case"iiii":return this.num(e.localWeekYear,4);case"o":return this.num(e.ordinal);case"ooo":return this.num(e.ordinal,3);case"q":return this.num(e.quarter);case"qq":return this.num(e.quarter,2);case"X":return this.num(Math.floor(e.ts/1e3));case"x":return this.num(e.ts);default:return u(t)}}))}formatDurationFromString(e,t){const n=e=>{switch(e[0]){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":return"hour";case"d":return"day";case"w":return"week";case"M":return"month";case"y":return"year";default:return null}},r=Dt.parseFormat(t),i=r.reduce(((e,{literal:t,val:n})=>t?e:e.concat(n)),[]);return Et(r,(e=>t=>{const r=n(t);return r?this.num(e.get(r),t.length):t})(e.shiftTo(...i.map(n).filter((e=>e)))))}}const Vt=/[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;function Wt(...e){const t=e.reduce(((e,t)=>e+t.source),"");return RegExp(`^${t}$`)}function zt(...e){return t=>e.reduce((([e,n,r],i)=>{const[s,o,a]=i(t,r);return[{...e,...s},o||n,a]}),[{},null,1]).slice(0,2)}function Ft(e,...t){if(null==e)return[null,null];for(const[n,r]of t){const t=n.exec(e);if(t)return r(t)}return[null,null]}function Zt(...e){return(t,n)=>{const r={};let i;for(i=0;i<e.length;i++)r[e[i]]=tt(t[n+i]);return[r,null,n+i]}}const Lt=/(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,$t=/(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/,jt=RegExp(`${$t.source}(?:${Lt.source}?(?:\\[(${Vt.source})\\])?)?`),Yt=RegExp(`(?:T${jt.source})?`),qt=Zt("weekYear","weekNumber","weekDay"),Ut=Zt("year","ordinal"),_t=RegExp(`${$t.source} ?(?:${Lt.source}|(${Vt.source}))?`),Ht=RegExp(`(?: ${_t.source})?`);function Rt(e,t,n){const r=e[t];return _e(r)?n:tt(r)}function Pt(e,t){return[{hours:Rt(e,t,0),minutes:Rt(e,t+1,0),seconds:Rt(e,t+2,0),milliseconds:rt(e[t+3])},null,t+4]}function Jt(e,t){const n=!e[t]&&!e[t+1],r=mt(e[t+1],e[t+2]);return[{},n?null:ge.instance(r),t+3]}function Gt(e,t){return[{},e[t]?re.create(e[t]):null,t+1]}const Qt=RegExp(`^T?${$t.source}$`),Xt=/^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;function Kt(e){const[t,n,r,i,s,o,a,u,c]=e,l="-"===t[0],d=u&&"-"===u[0],h=(e,t=!1)=>void 0!==e&&(t||e&&l)?-e:e;return[{years:h(nt(n)),months:h(nt(r)),weeks:h(nt(i)),days:h(nt(s)),hours:h(nt(o)),minutes:h(nt(a)),seconds:h(nt(u),"-0"===u),milliseconds:h(rt(c),d)}]}const en={GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function tn(e,t,n,r,i,s,o){const a={year:2===t.length?dt(tt(t)):tt(t),month:wt.indexOf(n)+1,day:tt(r),hour:tt(i),minute:tt(s)};return o&&(a.second=tt(o)),e&&(a.weekday=e.length>3?xt.indexOf(e)+1:vt.indexOf(e)+1),a}const nn=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;function rn(e){const[,t,n,r,i,s,o,a,u,c,l,d]=e,h=tn(t,i,r,n,s,o,a);let m;return m=u?en[u]:c?0:mt(l,d),[h,new ge(m)]}const sn=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,on=/^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,an=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;function un(e){const[,t,n,r,i,s,o,a]=e;return[tn(t,i,r,n,s,o,a),ge.utcInstance]}function cn(e){const[,t,n,r,i,s,o,a]=e;return[tn(t,a,n,r,i,s,o),ge.utcInstance]}const ln=Wt(/([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,Yt),dn=Wt(/(\d{4})-?W(\d\d)(?:-?(\d))?/,Yt),hn=Wt(/(\d{4})-?(\d{3})/,Yt),mn=Wt(jt),fn=zt((function(e,t){return[{year:Rt(e,t),month:Rt(e,t+1,1),day:Rt(e,t+2,1)},null,t+3]}),Pt,Jt,Gt),yn=zt(qt,Pt,Jt,Gt),pn=zt(Ut,Pt,Jt,Gt),An=zt(Pt,Jt,Gt),gn=zt(Pt),wn=Wt(/(\d{4})-(\d\d)-(\d\d)/,Ht),Cn=Wt(_t),kn=zt(Pt,Jt,Gt),xn="Invalid Duration",vn={weeks:{days:7,hours:168,minutes:10080,seconds:604800,milliseconds:6048e5},days:{hours:24,minutes:1440,seconds:86400,milliseconds:864e5},hours:{minutes:60,seconds:3600,milliseconds:36e5},minutes:{seconds:60,milliseconds:6e4},seconds:{milliseconds:1e3}},bn={years:{quarters:4,months:12,weeks:52,days:365,hours:8760,minutes:525600,seconds:31536e3,milliseconds:31536e6},quarters:{months:3,weeks:13,days:91,hours:2184,minutes:131040,seconds:7862400,milliseconds:78624e5},months:{weeks:4,days:30,hours:720,minutes:43200,seconds:2592e3,milliseconds:2592e6},...vn},In={years:{quarters:4,months:12,weeks:52.1775,days:365.2425,hours:8765.82,minutes:525949.2,seconds:525949.2*60,milliseconds:525949.2*60*1e3},quarters:{months:3,weeks:13.044375,days:91.310625,hours:2191.455,minutes:131487.3,seconds:525949.2*60/4,milliseconds:7889237999.999999},months:{weeks:4.3481250000000005,days:30.436875,hours:730.485,minutes:43829.1,seconds:2629746,milliseconds:2629746e3},...vn},Sn=["years","quarters","months","weeks","days","hours","minutes","seconds","milliseconds"],Tn=Sn.slice(0).reverse();function On(e,t,n=!1){const r={values:n?t.values:{...e.values,...t.values||{}},loc:e.loc.clone(t.loc),conversionAccuracy:t.conversionAccuracy||e.conversionAccuracy,matrix:t.matrix||e.matrix};return new En(r)}function Bn(e,t){let n=t.milliseconds??0;for(const r of Tn.slice(1))t[r]&&(n+=t[r]*e[r].milliseconds);return n}function Nn(e,t){const n=Bn(e,t)<0?-1:1;Sn.reduceRight(((r,i)=>{if(_e(t[i]))return r;if(r){const s=t[r]*n,o=e[i][r],a=Math.floor(s/o);t[i]+=a*n,t[r]-=a*o*n}return i}),null),Sn.reduce(((n,r)=>{if(_e(t[r]))return n;if(n){const i=t[n]%1;t[n]-=i,t[r]+=i*e[n][r]}return r}),null)}class En{constructor(e){const t="longterm"===e.conversionAccuracy||!1;let n=t?In:bn;e.matrix&&(n=e.matrix),this.values=e.values,this.loc=e.loc||pe.create(),this.conversionAccuracy=t?"longterm":"casual",this.invalid=e.invalid||null,this.matrix=n,this.isLuxonDuration=!0}static fromMillis(e,t){return En.fromObject({milliseconds:e},t)}static fromObject(e,t={}){if(null==e||"object"!=typeof e)throw new b("Duration.fromObject: argument expected to be an object, got "+(null===e?"null":typeof e));return new En({values:yt(e,En.normalizeUnit),loc:pe.fromObject(t),conversionAccuracy:t.conversionAccuracy,matrix:t.matrix})}static fromDurationLike(e){if(He(e))return En.fromMillis(e);if(En.isDuration(e))return e;if("object"==typeof e)return En.fromObject(e);throw new b(`Unknown duration argument ${e} of type ${typeof e}`)}static fromISO(e,t){const[n]=function(e){return Ft(e,[Xt,Kt])}(e);return n?En.fromObject(n,t):En.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static fromISOTime(e,t){const[n]=function(e){return Ft(e,[Qt,gn])}(e);return n?En.fromObject(n,t):En.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static invalid(e,t=null){if(!e)throw new b("need to specify a reason the Duration is invalid");const n=e instanceof Ne?e:new Ne(e,t);if(Be.throwOnInvalid)throw new k(n);return new En({invalid:n})}static normalizeUnit(e){const t={year:"years",years:"years",quarter:"quarters",quarters:"quarters",month:"months",months:"months",week:"weeks",weeks:"weeks",day:"days",days:"days",hour:"hours",hours:"hours",minute:"minutes",minutes:"minutes",second:"seconds",seconds:"seconds",millisecond:"milliseconds",milliseconds:"milliseconds"}[e?e.toLowerCase():e];if(!t)throw new v(e);return t}static isDuration(e){return e&&e.isLuxonDuration||!1}get locale(){return this.isValid?this.loc.locale:null}get numberingSystem(){return this.isValid?this.loc.numberingSystem:null}toFormat(e,t={}){const n={...t,floor:!1!==t.round&&!1!==t.floor};return this.isValid?Dt.create(this.loc,n).formatDurationFromString(this,e):xn}toHuman(e={}){if(!this.isValid)return xn;const t=Sn.map((t=>{const n=this.values[t];return _e(n)?null:this.loc.numberFormatter({style:"unit",unitDisplay:"long",...e,unit:t.slice(0,-1)}).format(n)})).filter((e=>e));return this.loc.listFormatter({type:"conjunction",style:e.listStyle||"narrow",...e}).format(t)}toObject(){return this.isValid?{...this.values}:{}}toISO(){if(!this.isValid)return null;let e="P";return 0!==this.years&&(e+=this.years+"Y"),0===this.months&&0===this.quarters||(e+=this.months+3*this.quarters+"M"),0!==this.weeks&&(e+=this.weeks+"W"),0!==this.days&&(e+=this.days+"D"),0===this.hours&&0===this.minutes&&0===this.seconds&&0===this.milliseconds||(e+="T"),0!==this.hours&&(e+=this.hours+"H"),0!==this.minutes&&(e+=this.minutes+"M"),0===this.seconds&&0===this.milliseconds||(e+=it(this.seconds+this.milliseconds/1e3,3)+"S"),"P"===e&&(e+="T0S"),e}toISOTime(e={}){if(!this.isValid)return null;const t=this.toMillis();return t<0||t>=864e5?null:(e={suppressMilliseconds:!1,suppressSeconds:!1,includePrefix:!1,format:"extended",...e,includeOffset:!1},vr.fromMillis(t,{zone:"UTC"}).toISOTime(e))}toJSON(){return this.toISO()}toString(){return this.toISO()}[Symbol.for("nodejs.util.inspect.custom")](){return this.isValid?`Duration { values: ${JSON.stringify(this.values)} }`:`Duration { Invalid, reason: ${this.invalidReason} }`}toMillis(){return this.isValid?Bn(this.matrix,this.values):NaN}valueOf(){return this.toMillis()}plus(e){if(!this.isValid)return this;const t=En.fromDurationLike(e),n={};for(const e of Sn)(Qe(t.values,e)||Qe(this.values,e))&&(n[e]=t.get(e)+this.get(e));return On(this,{values:n},!0)}minus(e){if(!this.isValid)return this;const t=En.fromDurationLike(e);return this.plus(t.negate())}mapUnits(e){if(!this.isValid)return this;const t={};for(const n of Object.keys(this.values))t[n]=ft(e(this.values[n],n));return On(this,{values:t},!0)}get(e){return this[En.normalizeUnit(e)]}set(e){return this.isValid?On(this,{values:{...this.values,...yt(e,En.normalizeUnit)}}):this}reconfigure({locale:e,numberingSystem:t,conversionAccuracy:n,matrix:r}={}){return On(this,{loc:this.loc.clone({locale:e,numberingSystem:t}),matrix:r,conversionAccuracy:n})}as(e){return this.isValid?this.shiftTo(e).get(e):NaN}normalize(){if(!this.isValid)return this;const e=this.toObject();return Nn(this.matrix,e),On(this,{values:e},!0)}rescale(){return this.isValid?On(this,{values:function(e){const t={};for(const[n,r]of Object.entries(e))0!==r&&(t[n]=r);return t}(this.normalize().shiftToAll().toObject())},!0):this}shiftTo(...e){if(!this.isValid)return this;if(0===e.length)return this;e=e.map((e=>En.normalizeUnit(e)));const t={},n={},r=this.toObject();let i;for(const s of Sn)if(e.indexOf(s)>=0){i=s;let e=0;for(const t in n)e+=this.matrix[t][s]*n[t],n[t]=0;He(r[s])&&(e+=r[s]);const o=Math.trunc(e);t[s]=o,n[s]=(1e3*e-1e3*o)/1e3}else He(r[s])&&(n[s]=r[s]);for(const e in n)0!==n[e]&&(t[i]+=e===i?n[e]:n[e]/this.matrix[i][e]);return Nn(this.matrix,t),On(this,{values:t},!0)}shiftToAll(){return this.isValid?this.shiftTo("years","months","weeks","days","hours","minutes","seconds","milliseconds"):this}negate(){if(!this.isValid)return this;const e={};for(const t of Object.keys(this.values))e[t]=0===this.values[t]?0:-this.values[t];return On(this,{values:e},!0)}get years(){return this.isValid?this.values.years||0:NaN}get quarters(){return this.isValid?this.values.quarters||0:NaN}get months(){return this.isValid?this.values.months||0:NaN}get weeks(){return this.isValid?this.values.weeks||0:NaN}get days(){return this.isValid?this.values.days||0:NaN}get hours(){return this.isValid?this.values.hours||0:NaN}get minutes(){return this.isValid?this.values.minutes||0:NaN}get seconds(){return this.isValid?this.values.seconds||0:NaN}get milliseconds(){return this.isValid?this.values.milliseconds||0:NaN}get isValid(){return null===this.invalid}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}equals(e){if(!this.isValid||!e.isValid)return!1;if(!this.loc.equals(e.loc))return!1;for(const r of Sn)if(t=this.values[r],n=e.values[r],!(void 0===t||0===t?void 0===n||0===n:t===n))return!1;var t,n;return!0}}const Mn="Invalid Interval";class Dn{constructor(e){this.s=e.start,this.e=e.end,this.invalid=e.invalid||null,this.isLuxonInterval=!0}static invalid(e,t=null){if(!e)throw new b("need to specify a reason the Interval is invalid");const n=e instanceof Ne?e:new Ne(e,t);if(Be.throwOnInvalid)throw new C(n);return new Dn({invalid:n})}static fromDateTimes(e,t){const n=br(e),r=br(t),i=function(e,t){return e&&e.isValid?t&&t.isValid?t<e?Dn.invalid("end before start",`The end of an interval must be after its start, but you had start=${e.toISO()} and end=${t.toISO()}`):null:Dn.invalid("missing or invalid end"):Dn.invalid("missing or invalid start")}(n,r);return null==i?new Dn({start:n,end:r}):i}static after(e,t){const n=En.fromDurationLike(t),r=br(e);return Dn.fromDateTimes(r,r.plus(n))}static before(e,t){const n=En.fromDurationLike(t),r=br(e);return Dn.fromDateTimes(r.minus(n),r)}static fromISO(e,t){const[n,r]=(e||"").split("/",2);if(n&&r){let e,i,s,o;try{e=vr.fromISO(n,t),i=e.isValid}catch(r){i=!1}try{s=vr.fromISO(r,t),o=s.isValid}catch(r){o=!1}if(i&&o)return Dn.fromDateTimes(e,s);if(i){const n=En.fromISO(r,t);if(n.isValid)return Dn.after(e,n)}else if(o){const e=En.fromISO(n,t);if(e.isValid)return Dn.before(s,e)}}return Dn.invalid("unparsable",`the input "${e}" can't be parsed as ISO 8601`)}static isInterval(e){return e&&e.isLuxonInterval||!1}get start(){return this.isValid?this.s:null}get end(){return this.isValid?this.e:null}get isValid(){return null===this.invalidReason}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}length(e="milliseconds"){return this.isValid?this.toDuration(e).get(e):NaN}count(e="milliseconds",t){if(!this.isValid)return NaN;const n=this.start.startOf(e,t);let r;return r=t?.useLocaleWeeks?this.end.reconfigure({locale:n.locale}):this.end,r=r.startOf(e,t),Math.floor(r.diff(n,e).get(e))+(r.valueOf()!==this.end.valueOf())}hasSame(e){return!!this.isValid&&(this.isEmpty()||this.e.minus(1).hasSame(this.s,e))}isEmpty(){return this.s.valueOf()===this.e.valueOf()}isAfter(e){return!!this.isValid&&this.s>e}isBefore(e){return!!this.isValid&&this.e<=e}contains(e){return!!this.isValid&&this.s<=e&&this.e>e}set({start:e,end:t}={}){return this.isValid?Dn.fromDateTimes(e||this.s,t||this.e):this}splitAt(...e){if(!this.isValid)return[];const t=e.map(br).filter((e=>this.contains(e))).sort(((e,t)=>e.toMillis()-t.toMillis())),n=[];let{s:r}=this,i=0;for(;r<this.e;){const e=t[i]||this.e,s=+e>+this.e?this.e:e;n.push(Dn.fromDateTimes(r,s)),r=s,i+=1}return n}splitBy(e){const t=En.fromDurationLike(e);if(!this.isValid||!t.isValid||0===t.as("milliseconds"))return[];let n,{s:r}=this,i=1;const s=[];for(;r<this.e;){const e=this.start.plus(t.mapUnits((e=>e*i)));n=+e>+this.e?this.e:e,s.push(Dn.fromDateTimes(r,n)),r=n,i+=1}return s}divideEqually(e){return this.isValid?this.splitBy(this.length()/e).slice(0,e):[]}overlaps(e){return this.e>e.s&&this.s<e.e}abutsStart(e){return!!this.isValid&&+this.e==+e.s}abutsEnd(e){return!!this.isValid&&+e.e==+this.s}engulfs(e){return!!this.isValid&&this.s<=e.s&&this.e>=e.e}equals(e){return!(!this.isValid||!e.isValid)&&this.s.equals(e.s)&&this.e.equals(e.e)}intersection(e){if(!this.isValid)return this;const t=this.s>e.s?this.s:e.s,n=this.e<e.e?this.e:e.e;return t>=n?null:Dn.fromDateTimes(t,n)}union(e){if(!this.isValid)return this;const t=this.s<e.s?this.s:e.s,n=this.e>e.e?this.e:e.e;return Dn.fromDateTimes(t,n)}static merge(e){const[t,n]=e.sort(((e,t)=>e.s-t.s)).reduce((([e,t],n)=>t?t.overlaps(n)||t.abutsStart(n)?[e,t.union(n)]:[e.concat([t]),n]:[e,n]),[[],null]);return n&&t.push(n),t}static xor(e){let t=null,n=0;const r=[],i=e.map((e=>[{time:e.s,type:"s"},{time:e.e,type:"e"}])),s=Array.prototype.concat(...i).sort(((e,t)=>e.time-t.time));for(const e of s)n+="s"===e.type?1:-1,1===n?t=e.time:(t&&+t!=+e.time&&r.push(Dn.fromDateTimes(t,e.time)),t=null);return Dn.merge(r)}difference(...e){return Dn.xor([this].concat(e)).map((e=>this.intersection(e))).filter((e=>e&&!e.isEmpty()))}toString(){return this.isValid?`[${this.s.toISO()} – ${this.e.toISO()})`:Mn}[Symbol.for("nodejs.util.inspect.custom")](){return this.isValid?`Interval { start: ${this.s.toISO()}, end: ${this.e.toISO()} }`:`Interval { Invalid, reason: ${this.invalidReason} }`}toLocaleString(e=B,t={}){return this.isValid?Dt.create(this.s.loc.clone(t),e).formatInterval(this):Mn}toISO(e){return this.isValid?`${this.s.toISO(e)}/${this.e.toISO(e)}`:Mn}toISODate(){return this.isValid?`${this.s.toISODate()}/${this.e.toISODate()}`:Mn}toISOTime(e){return this.isValid?`${this.s.toISOTime(e)}/${this.e.toISOTime(e)}`:Mn}toFormat(e,{separator:t=" – "}={}){return this.isValid?`${this.s.toFormat(e)}${t}${this.e.toFormat(e)}`:Mn}toDuration(e,t){return this.isValid?this.e.diff(this.s,e,t):En.invalid(this.invalidReason)}mapEndpoints(e){return Dn.fromDateTimes(e(this.s),e(this.e))}}class Vn{static hasDST(e=Be.defaultZone){const t=vr.now().setZone(e).set({month:12});return!e.isUniversal&&t.offset!==t.set({month:6}).offset}static isValidIANAZone(e){return re.isValidZone(e)}static normalizeZone(e){return Ce(e,Be.defaultZone)}static getStartOfWeek({locale:e=null,locObj:t=null}={}){return(t||pe.create(e)).getStartOfWeek()}static getMinimumDaysInFirstWeek({locale:e=null,locObj:t=null}={}){return(t||pe.create(e)).getMinDaysInFirstWeek()}static getWeekendWeekdays({locale:e=null,locObj:t=null}={}){return(t||pe.create(e)).getWeekendDays().slice()}static months(e="long",{locale:t=null,numberingSystem:n=null,locObj:r=null,outputCalendar:i="gregory"}={}){return(r||pe.create(t,n,i)).months(e)}static monthsFormat(e="long",{locale:t=null,numberingSystem:n=null,locObj:r=null,outputCalendar:i="gregory"}={}){return(r||pe.create(t,n,i)).months(e,!0)}static weekdays(e="long",{locale:t=null,numberingSystem:n=null,locObj:r=null}={}){return(r||pe.create(t,n,null)).weekdays(e)}static weekdaysFormat(e="long",{locale:t=null,numberingSystem:n=null,locObj:r=null}={}){return(r||pe.create(t,n,null)).weekdays(e,!0)}static meridiems({locale:e=null}={}){return pe.create(e).meridiems()}static eras(e="short",{locale:t=null}={}){return pe.create(t,null,"gregory").eras(e)}static features(){return{relative:Pe(),localeWeek:Je()}}}function Wn(e,t){const n=e=>e.toUTC(0,{keepLocalTime:!0}).startOf("day").valueOf(),r=n(t)-n(e);return Math.floor(En.fromMillis(r).as("days"))}const zn={arab:"[٠-٩]",arabext:"[۰-۹]",bali:"[᭐-᭙]",beng:"[০-৯]",deva:"[०-९]",fullwide:"[０-９]",gujr:"[૦-૯]",hanidec:"[〇|一|二|三|四|五|六|七|八|九]",khmr:"[០-៩]",knda:"[೦-೯]",laoo:"[໐-໙]",limb:"[᥆-᥏]",mlym:"[൦-൯]",mong:"[᠐-᠙]",mymr:"[၀-၉]",orya:"[୦-୯]",tamldec:"[௦-௯]",telu:"[౦-౯]",thai:"[๐-๙]",tibt:"[༠-༩]",latn:"\\d"},Fn={arab:[1632,1641],arabext:[1776,1785],bali:[6992,7001],beng:[2534,2543],deva:[2406,2415],fullwide:[65296,65303],gujr:[2790,2799],khmr:[6112,6121],knda:[3302,3311],laoo:[3792,3801],limb:[6470,6479],mlym:[3430,3439],mong:[6160,6169],mymr:[4160,4169],orya:[2918,2927],tamldec:[3046,3055],telu:[3174,3183],thai:[3664,3673],tibt:[3872,3881]},Zn=zn.hanidec.replace(/[\[|\]]/g,"").split("");function Ln({numberingSystem:e},t=""){return new RegExp(`${zn[e||"latn"]}${t}`)}function $n(e,t=(e=>e)){return{regex:e,deser:([e])=>t(function(e){let t=parseInt(e,10);if(isNaN(t)){t="";for(let n=0;n<e.length;n++){const r=e.charCodeAt(n);if(-1!==e[n].search(zn.hanidec))t+=Zn.indexOf(e[n]);else for(const e in Fn){const[n,i]=Fn[e];r>=n&&r<=i&&(t+=r-n)}}return parseInt(t,10)}return t}(e))}}const jn=`[ ${String.fromCharCode(160)}]`,Yn=new RegExp(jn,"g");function qn(e){return e.replace(/\./g,"\\.?").replace(Yn,jn)}function Un(e){return e.replace(/\./g,"").replace(Yn," ").toLowerCase()}function _n(e,t){return null===e?null:{regex:RegExp(e.map(qn).join("|")),deser:([n])=>e.findIndex((e=>Un(n)===Un(e)))+t}}function Hn(e,t){return{regex:e,deser:([,e,t])=>mt(e,t),groups:t}}function Rn(e){return{regex:e,deser:([e])=>e}}const Pn={year:{"2-digit":"yy",numeric:"yyyyy"},month:{numeric:"M","2-digit":"MM",short:"MMM",long:"MMMM"},day:{numeric:"d","2-digit":"dd"},weekday:{short:"EEE",long:"EEEE"},dayperiod:"a",dayPeriod:"a",hour12:{numeric:"h","2-digit":"hh"},hour24:{numeric:"H","2-digit":"HH"},minute:{numeric:"m","2-digit":"mm"},second:{numeric:"s","2-digit":"ss"},timeZoneName:{long:"ZZZZZ",short:"ZZZ"}};let Jn=null;function Gn(e,t){return Array.prototype.concat(...e.map((e=>function(e,t){if(e.literal)return e;const n=Xn(Dt.macroTokenToFormatOpts(e.val),t);return null==n||n.includes(void 0)?e:n}(e,t))))}function Qn(e,t,n){const r=Gn(Dt.parseFormat(n),e),i=r.map((t=>function(e,t){const n=Ln(t),r=Ln(t,"{2}"),i=Ln(t,"{3}"),s=Ln(t,"{4}"),o=Ln(t,"{6}"),a=Ln(t,"{1,2}"),u=Ln(t,"{1,3}"),c=Ln(t,"{1,6}"),l=Ln(t,"{1,9}"),d=Ln(t,"{2,4}"),h=Ln(t,"{4,6}"),m=e=>{return{regex:RegExp((t=e.val,t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&"))),deser:([e])=>e,literal:!0};var t},f=(f=>{if(e.literal)return m(f);switch(f.val){case"G":return _n(t.eras("short"),0);case"GG":return _n(t.eras("long"),0);case"y":return $n(c);case"yy":case"kk":return $n(d,dt);case"yyyy":case"kkkk":return $n(s);case"yyyyy":return $n(h);case"yyyyyy":return $n(o);case"M":case"L":case"d":case"H":case"h":case"m":case"q":case"s":case"W":return $n(a);case"MM":case"LL":case"dd":case"HH":case"hh":case"mm":case"qq":case"ss":case"WW":return $n(r);case"MMM":return _n(t.months("short",!0),1);case"MMMM":return _n(t.months("long",!0),1);case"LLL":return _n(t.months("short",!1),1);case"LLLL":return _n(t.months("long",!1),1);case"o":case"S":return $n(u);case"ooo":case"SSS":return $n(i);case"u":return Rn(l);case"uu":return Rn(a);case"uuu":case"E":case"c":return $n(n);case"a":return _n(t.meridiems(),0);case"EEE":return _n(t.weekdays("short",!1),1);case"EEEE":return _n(t.weekdays("long",!1),1);case"ccc":return _n(t.weekdays("short",!0),1);case"cccc":return _n(t.weekdays("long",!0),1);case"Z":case"ZZ":return Hn(new RegExp(`([+-]${a.source})(?::(${r.source}))?`),2);case"ZZZ":return Hn(new RegExp(`([+-]${a.source})(${r.source})?`),2);case"z":return Rn(/[a-z_+-/]{1,256}?/i);case" ":return Rn(/[^\S\n\r]/);default:return m(f)}})(e)||{invalidReason:"missing Intl.DateTimeFormat.formatToParts support"};return f.token=e,f}(t,e))),s=i.find((e=>e.invalidReason));if(s)return{input:t,tokens:r,invalidReason:s.invalidReason};{const[e,n]=function(e){return[`^${e.map((e=>e.regex)).reduce(((e,t)=>`${e}(${t.source})`),"")}$`,e]}(i),s=RegExp(e,"i"),[o,a]=function(e,t,n){const r=e.match(t);if(r){const e={};let t=1;for(const i in n)if(Qe(n,i)){const s=n[i],o=s.groups?s.groups+1:1;!s.literal&&s.token&&(e[s.token.val[0]]=s.deser(r.slice(t,t+o))),t+=o}return[r,e]}return[r,{}]}(t,s,n),[u,c,l]=a?function(e){let t,n=null;return _e(e.z)||(n=re.create(e.z)),_e(e.Z)||(n||(n=new ge(e.Z)),t=e.Z),_e(e.q)||(e.M=3*(e.q-1)+1),_e(e.h)||(e.h<12&&1===e.a?e.h+=12:12===e.h&&0===e.a&&(e.h=0)),0===e.G&&e.y&&(e.y=-e.y),_e(e.u)||(e.S=rt(e.u)),[Object.keys(e).reduce(((t,n)=>{const r=(e=>{switch(e){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":case"H":return"hour";case"d":return"day";case"o":return"ordinal";case"L":case"M":return"month";case"y":return"year";case"E":case"c":return"weekday";case"W":return"weekNumber";case"k":return"weekYear";case"q":return"quarter";default:return null}})(n);return r&&(t[r]=e[n]),t}),{}),n,t]}(a):[null,null,void 0];if(Qe(a,"a")&&Qe(a,"H"))throw new x("Can't include meridiem when specifying 24-hour format");return{input:t,tokens:r,regex:s,rawMatches:o,matches:a,result:u,zone:c,specificOffset:l}}}function Xn(e,t){if(!e)return null;const n=Dt.create(t,e).dtFormatter((Jn||(Jn=vr.fromMillis(1555555555555)),Jn)),r=n.formatToParts(),i=n.resolvedOptions();return r.map((t=>function(e,t,n){const{type:r,value:i}=e;if("literal"===r){const e=/^\s+$/.test(i);return{literal:!e,val:e?" ":i}}const s=t[r];let o=r;"hour"===r&&(o=null!=t.hour12?t.hour12?"hour12":"hour24":null!=t.hourCycle?"h11"===t.hourCycle||"h12"===t.hourCycle?"hour12":"hour24":n.hour12?"hour12":"hour24");let a=Pn[o];if("object"==typeof a&&(a=a[s]),a)return{literal:!1,val:a}}(t,e,i)))}const Kn="Invalid DateTime",er=864e13;function tr(e){return new Ne("unsupported zone",`the zone "${e.name}" is not supported`)}function nr(e){return null===e.weekData&&(e.weekData=Ze(e.c)),e.weekData}function rr(e){return null===e.localWeekData&&(e.localWeekData=Ze(e.c,e.loc.getMinDaysInFirstWeek(),e.loc.getStartOfWeek())),e.localWeekData}function ir(e,t){const n={ts:e.ts,zone:e.zone,c:e.c,o:e.o,loc:e.loc,invalid:e.invalid};return new vr({...n,...t,old:n})}function sr(e,t,n){let r=e-60*t*1e3;const i=n.offset(r);if(t===i)return[r,t];r-=60*(i-t)*1e3;const s=n.offset(r);return i===s?[r,i]:[e-60*Math.min(i,s)*1e3,Math.max(i,s)]}function or(e,t){const n=new Date(e+=60*t*1e3);return{year:n.getUTCFullYear(),month:n.getUTCMonth()+1,day:n.getUTCDate(),hour:n.getUTCHours(),minute:n.getUTCMinutes(),second:n.getUTCSeconds(),millisecond:n.getUTCMilliseconds()}}function ar(e,t,n){return sr(ut(e),t,n)}function ur(e,t){const n=e.o,r=e.c.year+Math.trunc(t.years),i=e.c.month+Math.trunc(t.months)+3*Math.trunc(t.quarters),s={...e.c,year:r,month:i,day:Math.min(e.c.day,at(r,i))+Math.trunc(t.days)+7*Math.trunc(t.weeks)},o=En.fromObject({years:t.years-Math.trunc(t.years),quarters:t.quarters-Math.trunc(t.quarters),months:t.months-Math.trunc(t.months),weeks:t.weeks-Math.trunc(t.weeks),days:t.days-Math.trunc(t.days),hours:t.hours,minutes:t.minutes,seconds:t.seconds,milliseconds:t.milliseconds}).as("milliseconds"),a=ut(s);let[u,c]=sr(a,n,e.zone);return 0!==o&&(u+=o,c=e.zone.offset(u)),{ts:u,o:c}}function cr(e,t,n,r,i,s){const{setZone:o,zone:a}=n;if(e&&0!==Object.keys(e).length||t){const r=t||a,i=vr.fromObject(e,{...n,zone:r,specificOffset:s});return o?i:i.setZone(a)}return vr.invalid(new Ne("unparsable",`the input "${i}" can't be parsed as ${r}`))}function lr(e,t,n=!0){return e.isValid?Dt.create(pe.create("en-US"),{allowZ:n,forceSimple:!0}).formatDateTimeFromString(e,t):null}function dr(e,t){const n=e.c.year>9999||e.c.year<0;let r="";return n&&e.c.year>=0&&(r+="+"),r+=et(e.c.year,n?6:4),t?(r+="-",r+=et(e.c.month),r+="-",r+=et(e.c.day)):(r+=et(e.c.month),r+=et(e.c.day)),r}function hr(e,t,n,r,i,s){let o=et(e.c.hour);return t?(o+=":",o+=et(e.c.minute),0===e.c.millisecond&&0===e.c.second&&n||(o+=":")):o+=et(e.c.minute),0===e.c.millisecond&&0===e.c.second&&n||(o+=et(e.c.second),0===e.c.millisecond&&r||(o+=".",o+=et(e.c.millisecond,3))),i&&(e.isOffsetFixed&&0===e.offset&&!s?o+="Z":e.o<0?(o+="-",o+=et(Math.trunc(-e.o/60)),o+=":",o+=et(Math.trunc(-e.o%60))):(o+="+",o+=et(Math.trunc(e.o/60)),o+=":",o+=et(Math.trunc(e.o%60)))),s&&(o+="["+e.zone.ianaName+"]"),o}const mr={month:1,day:1,hour:0,minute:0,second:0,millisecond:0},fr={weekNumber:1,weekday:1,hour:0,minute:0,second:0,millisecond:0},yr={ordinal:1,hour:0,minute:0,second:0,millisecond:0},pr=["year","month","day","hour","minute","second","millisecond"],Ar=["weekYear","weekNumber","weekday","hour","minute","second","millisecond"],gr=["year","ordinal","hour","minute","second","millisecond"];function wr(e){switch(e.toLowerCase()){case"localweekday":case"localweekdays":return"localWeekday";case"localweeknumber":case"localweeknumbers":return"localWeekNumber";case"localweekyear":case"localweekyears":return"localWeekYear";default:return function(e){const t={year:"year",years:"year",month:"month",months:"month",day:"day",days:"day",hour:"hour",hours:"hour",minute:"minute",minutes:"minute",quarter:"quarter",quarters:"quarter",second:"second",seconds:"second",millisecond:"millisecond",milliseconds:"millisecond",weekday:"weekday",weekdays:"weekday",weeknumber:"weekNumber",weeksnumber:"weekNumber",weeknumbers:"weekNumber",weekyear:"weekYear",weekyears:"weekYear",ordinal:"ordinal"}[e.toLowerCase()];if(!t)throw new v(e);return t}(e)}}function Cr(e,t){const n=Ce(t.zone,Be.defaultZone),r=pe.fromObject(t),i=Be.now();let s,o;if(_e(e.year))s=i;else{for(const t of pr)_e(e[t])&&(e[t]=mr[t]);const t=qe(e)||Ue(e);if(t)return vr.invalid(t);const r=n.offset(i);[s,o]=ar(e,r,n)}return new vr({ts:s,zone:n,loc:r,o})}function kr(e,t,n){const r=!!_e(n.round)||n.round,i=(e,i)=>(e=it(e,r||n.calendary?0:2,!0),t.loc.clone(n).relFormatter(n).format(e,i)),s=r=>n.calendary?t.hasSame(e,r)?0:t.startOf(r).diff(e.startOf(r),r).get(r):t.diff(e,r).get(r);if(n.unit)return i(s(n.unit),n.unit);for(const e of n.units){const t=s(e);if(Math.abs(t)>=1)return i(t,e)}return i(e>t?-0:0,n.units[n.units.length-1])}function xr(e){let t,n={};return e.length>0&&"object"==typeof e[e.length-1]?(n=e[e.length-1],t=Array.from(e).slice(0,e.length-1)):t=Array.from(e),[n,t]}class vr{constructor(e){const t=e.zone||Be.defaultZone;let n=e.invalid||(Number.isNaN(e.ts)?new Ne("invalid input"):null)||(t.isValid?null:tr(t));this.ts=_e(e.ts)?Be.now():e.ts;let r=null,i=null;if(!n)if(e.old&&e.old.ts===this.ts&&e.old.zone.equals(t))[r,i]=[e.old.c,e.old.o];else{const e=t.offset(this.ts);r=or(this.ts,e),n=Number.isNaN(r.year)?new Ne("invalid input"):null,r=n?null:r,i=n?null:e}this._zone=t,this.loc=e.loc||pe.create(),this.invalid=n,this.weekData=null,this.localWeekData=null,this.c=r,this.o=i,this.isLuxonDateTime=!0}static now(){return new vr({})}static local(){const[e,t]=xr(arguments),[n,r,i,s,o,a,u]=t;return Cr({year:n,month:r,day:i,hour:s,minute:o,second:a,millisecond:u},e)}static utc(){const[e,t]=xr(arguments),[n,r,i,s,o,a,u]=t;return e.zone=ge.utcInstance,Cr({year:n,month:r,day:i,hour:s,minute:o,second:a,millisecond:u},e)}static fromJSDate(e,t={}){const n=(r=e,"[object Date]"===Object.prototype.toString.call(r)?e.valueOf():NaN);var r;if(Number.isNaN(n))return vr.invalid("invalid input");const i=Ce(t.zone,Be.defaultZone);return i.isValid?new vr({ts:n,zone:i,loc:pe.fromObject(t)}):vr.invalid(tr(i))}static fromMillis(e,t={}){if(He(e))return e<-er||e>er?vr.invalid("Timestamp out of range"):new vr({ts:e,zone:Ce(t.zone,Be.defaultZone),loc:pe.fromObject(t)});throw new b(`fromMillis requires a numerical input, but received a ${typeof e} with value ${e}`)}static fromSeconds(e,t={}){if(He(e))return new vr({ts:1e3*e,zone:Ce(t.zone,Be.defaultZone),loc:pe.fromObject(t)});throw new b("fromSeconds requires a numerical input")}static fromObject(e,t={}){e=e||{};const n=Ce(t.zone,Be.defaultZone);if(!n.isValid)return vr.invalid(tr(n));const r=pe.fromObject(t),i=yt(e,wr),{minDaysInFirstWeek:s,startOfWeek:o}=Ye(i,r),a=Be.now(),u=_e(t.specificOffset)?n.offset(a):t.specificOffset,c=!_e(i.ordinal),l=!_e(i.year),d=!_e(i.month)||!_e(i.day),h=l||d,m=i.weekYear||i.weekNumber;if((h||c)&&m)throw new x("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(d&&c)throw new x("Can't mix ordinal dates with month/day");const f=m||i.weekday&&!h;let y,p,A=or(a,u);f?(y=Ar,p=fr,A=Ze(A,s,o)):c?(y=gr,p=yr,A=$e(A)):(y=pr,p=mr);let g=!1;for(const e of y)_e(i[e])?i[e]=g?p[e]:A[e]:g=!0;const w=f?function(e,t=4,n=1){const r=Re(e.weekYear),i=Ke(e.weekNumber,1,lt(e.weekYear,t,n)),s=Ke(e.weekday,1,7);return r?i?!s&&De("weekday",e.weekday):De("week",e.weekNumber):De("weekYear",e.weekYear)}(i,s,o):c?function(e){const t=Re(e.year),n=Ke(e.ordinal,1,ot(e.year));return t?!n&&De("ordinal",e.ordinal):De("year",e.year)}(i):qe(i),C=w||Ue(i);if(C)return vr.invalid(C);const k=f?Le(i,s,o):c?je(i):i,[v,b]=ar(k,u,n),I=new vr({ts:v,zone:n,o:b,loc:r});return i.weekday&&h&&e.weekday!==I.weekday?vr.invalid("mismatched weekday",`you can't specify both a weekday of ${i.weekday} and a date of ${I.toISO()}`):I}static fromISO(e,t={}){const[n,r]=function(e){return Ft(e,[ln,fn],[dn,yn],[hn,pn],[mn,An])}(e);return cr(n,r,t,"ISO 8601",e)}static fromRFC2822(e,t={}){const[n,r]=function(e){return Ft(function(e){return e.replace(/\([^()]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim()}(e),[nn,rn])}(e);return cr(n,r,t,"RFC 2822",e)}static fromHTTP(e,t={}){const[n,r]=function(e){return Ft(e,[sn,un],[on,un],[an,cn])}(e);return cr(n,r,t,"HTTP",t)}static fromFormat(e,t,n={}){if(_e(e)||_e(t))throw new b("fromFormat requires an input string and a format");const{locale:r=null,numberingSystem:i=null}=n,s=pe.fromOpts({locale:r,numberingSystem:i,defaultToEN:!0}),[o,a,u,c]=function(e,t,n){const{result:r,zone:i,specificOffset:s,invalidReason:o}=Qn(e,t,n);return[r,i,s,o]}(s,e,t);return c?vr.invalid(c):cr(o,a,n,`format ${t}`,e,u)}static fromString(e,t,n={}){return vr.fromFormat(e,t,n)}static fromSQL(e,t={}){const[n,r]=function(e){return Ft(e,[wn,fn],[Cn,kn])}(e);return cr(n,r,t,"SQL",e)}static invalid(e,t=null){if(!e)throw new b("need to specify a reason the DateTime is invalid");const n=e instanceof Ne?e:new Ne(e,t);if(Be.throwOnInvalid)throw new w(n);return new vr({invalid:n})}static isDateTime(e){return e&&e.isLuxonDateTime||!1}static parseFormatForOpts(e,t={}){const n=Xn(e,pe.fromObject(t));return n?n.map((e=>e?e.val:null)).join(""):null}static expandFormat(e,t={}){return Gn(Dt.parseFormat(e),pe.fromObject(t)).map((e=>e.val)).join("")}get(e){return this[e]}get isValid(){return null===this.invalid}get invalidReason(){return this.invalid?this.invalid.reason:null}get invalidExplanation(){return this.invalid?this.invalid.explanation:null}get locale(){return this.isValid?this.loc.locale:null}get numberingSystem(){return this.isValid?this.loc.numberingSystem:null}get outputCalendar(){return this.isValid?this.loc.outputCalendar:null}get zone(){return this._zone}get zoneName(){return this.isValid?this.zone.name:null}get year(){return this.isValid?this.c.year:NaN}get quarter(){return this.isValid?Math.ceil(this.c.month/3):NaN}get month(){return this.isValid?this.c.month:NaN}get day(){return this.isValid?this.c.day:NaN}get hour(){return this.isValid?this.c.hour:NaN}get minute(){return this.isValid?this.c.minute:NaN}get second(){return this.isValid?this.c.second:NaN}get millisecond(){return this.isValid?this.c.millisecond:NaN}get weekYear(){return this.isValid?nr(this).weekYear:NaN}get weekNumber(){return this.isValid?nr(this).weekNumber:NaN}get weekday(){return this.isValid?nr(this).weekday:NaN}get isWeekend(){return this.isValid&&this.loc.getWeekendDays().includes(this.weekday)}get localWeekday(){return this.isValid?rr(this).weekday:NaN}get localWeekNumber(){return this.isValid?rr(this).weekNumber:NaN}get localWeekYear(){return this.isValid?rr(this).weekYear:NaN}get ordinal(){return this.isValid?$e(this.c).ordinal:NaN}get monthShort(){return this.isValid?Vn.months("short",{locObj:this.loc})[this.month-1]:null}get monthLong(){return this.isValid?Vn.months("long",{locObj:this.loc})[this.month-1]:null}get weekdayShort(){return this.isValid?Vn.weekdays("short",{locObj:this.loc})[this.weekday-1]:null}get weekdayLong(){return this.isValid?Vn.weekdays("long",{locObj:this.loc})[this.weekday-1]:null}get offset(){return this.isValid?+this.o:NaN}get offsetNameShort(){return this.isValid?this.zone.offsetName(this.ts,{format:"short",locale:this.locale}):null}get offsetNameLong(){return this.isValid?this.zone.offsetName(this.ts,{format:"long",locale:this.locale}):null}get isOffsetFixed(){return this.isValid?this.zone.isUniversal:null}get isInDST(){return!this.isOffsetFixed&&(this.offset>this.set({month:1,day:1}).offset||this.offset>this.set({month:5}).offset)}getPossibleOffsets(){if(!this.isValid||this.isOffsetFixed)return[this];const e=864e5,t=6e4,n=ut(this.c),r=this.zone.offset(n-e),i=this.zone.offset(n+e),s=this.zone.offset(n-r*t),o=this.zone.offset(n-i*t);if(s===o)return[this];const a=n-s*t,u=n-o*t,c=or(a,s),l=or(u,o);return c.hour===l.hour&&c.minute===l.minute&&c.second===l.second&&c.millisecond===l.millisecond?[ir(this,{ts:a}),ir(this,{ts:u})]:[this]}get isInLeapYear(){return st(this.year)}get daysInMonth(){return at(this.year,this.month)}get daysInYear(){return this.isValid?ot(this.year):NaN}get weeksInWeekYear(){return this.isValid?lt(this.weekYear):NaN}get weeksInLocalWeekYear(){return this.isValid?lt(this.localWeekYear,this.loc.getMinDaysInFirstWeek(),this.loc.getStartOfWeek()):NaN}resolvedLocaleOptions(e={}){const{locale:t,numberingSystem:n,calendar:r}=Dt.create(this.loc.clone(e),e).resolvedOptions(this);return{locale:t,numberingSystem:n,outputCalendar:r}}toUTC(e=0,t={}){return this.setZone(ge.instance(e),t)}toLocal(){return this.setZone(Be.defaultZone)}setZone(e,{keepLocalTime:t=!1,keepCalendarTime:n=!1}={}){if((e=Ce(e,Be.defaultZone)).equals(this.zone))return this;if(e.isValid){let r=this.ts;if(t||n){const t=e.offset(this.ts),n=this.toObject();[r]=ar(n,t,e)}return ir(this,{ts:r,zone:e})}return vr.invalid(tr(e))}reconfigure({locale:e,numberingSystem:t,outputCalendar:n}={}){return ir(this,{loc:this.loc.clone({locale:e,numberingSystem:t,outputCalendar:n})})}setLocale(e){return this.reconfigure({locale:e})}set(e){if(!this.isValid)return this;const t=yt(e,wr),{minDaysInFirstWeek:n,startOfWeek:r}=Ye(t,this.loc),i=!_e(t.weekYear)||!_e(t.weekNumber)||!_e(t.weekday),s=!_e(t.ordinal),o=!_e(t.year),a=!_e(t.month)||!_e(t.day),u=o||a,c=t.weekYear||t.weekNumber;if((u||s)&&c)throw new x("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(a&&s)throw new x("Can't mix ordinal dates with month/day");let l;i?l=Le({...Ze(this.c,n,r),...t},n,r):_e(t.ordinal)?(l={...this.toObject(),...t},_e(t.day)&&(l.day=Math.min(at(l.year,l.month),l.day))):l=je({...$e(this.c),...t});const[d,h]=ar(l,this.o,this.zone);return ir(this,{ts:d,o:h})}plus(e){return this.isValid?ir(this,ur(this,En.fromDurationLike(e))):this}minus(e){return this.isValid?ir(this,ur(this,En.fromDurationLike(e).negate())):this}startOf(e,{useLocaleWeeks:t=!1}={}){if(!this.isValid)return this;const n={},r=En.normalizeUnit(e);switch(r){case"years":n.month=1;case"quarters":case"months":n.day=1;case"weeks":case"days":n.hour=0;case"hours":n.minute=0;case"minutes":n.second=0;case"seconds":n.millisecond=0}if("weeks"===r)if(t){const e=this.loc.getStartOfWeek(),{weekday:t}=this;t<e&&(n.weekNumber=this.weekNumber-1),n.weekday=e}else n.weekday=1;if("quarters"===r){const e=Math.ceil(this.month/3);n.month=3*(e-1)+1}return this.set(n)}endOf(e,t){return this.isValid?this.plus({[e]:1}).startOf(e,t).minus(1):this}toFormat(e,t={}){return this.isValid?Dt.create(this.loc.redefaultToEN(t)).formatDateTimeFromString(this,e):Kn}toLocaleString(e=B,t={}){return this.isValid?Dt.create(this.loc.clone(t),e).formatDateTime(this):Kn}toLocaleParts(e={}){return this.isValid?Dt.create(this.loc.clone(e),e).formatDateTimeParts(this):[]}toISO({format:e="extended",suppressSeconds:t=!1,suppressMilliseconds:n=!1,includeOffset:r=!0,extendedZone:i=!1}={}){if(!this.isValid)return null;const s="extended"===e;let o=dr(this,s);return o+="T",o+=hr(this,s,t,n,r,i),o}toISODate({format:e="extended"}={}){return this.isValid?dr(this,"extended"===e):null}toISOWeekDate(){return lr(this,"kkkk-'W'WW-c")}toISOTime({suppressMilliseconds:e=!1,suppressSeconds:t=!1,includeOffset:n=!0,includePrefix:r=!1,extendedZone:i=!1,format:s="extended"}={}){return this.isValid?(r?"T":"")+hr(this,"extended"===s,t,e,n,i):null}toRFC2822(){return lr(this,"EEE, dd LLL yyyy HH:mm:ss ZZZ",!1)}toHTTP(){return lr(this.toUTC(),"EEE, dd LLL yyyy HH:mm:ss 'GMT'")}toSQLDate(){return this.isValid?dr(this,!0):null}toSQLTime({includeOffset:e=!0,includeZone:t=!1,includeOffsetSpace:n=!0}={}){let r="HH:mm:ss.SSS";return(t||e)&&(n&&(r+=" "),t?r+="z":e&&(r+="ZZ")),lr(this,r,!0)}toSQL(e={}){return this.isValid?`${this.toSQLDate()} ${this.toSQLTime(e)}`:null}toString(){return this.isValid?this.toISO():Kn}[Symbol.for("nodejs.util.inspect.custom")](){return this.isValid?`DateTime { ts: ${this.toISO()}, zone: ${this.zone.name}, locale: ${this.locale} }`:`DateTime { Invalid, reason: ${this.invalidReason} }`}valueOf(){return this.toMillis()}toMillis(){return this.isValid?this.ts:NaN}toSeconds(){return this.isValid?this.ts/1e3:NaN}toUnixInteger(){return this.isValid?Math.floor(this.ts/1e3):NaN}toJSON(){return this.toISO()}toBSON(){return this.toJSDate()}toObject(e={}){if(!this.isValid)return{};const t={...this.c};return e.includeConfig&&(t.outputCalendar=this.outputCalendar,t.numberingSystem=this.loc.numberingSystem,t.locale=this.loc.locale),t}toJSDate(){return new Date(this.isValid?this.ts:NaN)}diff(e,t="milliseconds",n={}){if(!this.isValid||!e.isValid)return En.invalid("created by diffing an invalid DateTime");const r={locale:this.locale,numberingSystem:this.numberingSystem,...n},i=(a=t,Array.isArray(a)?a:[a]).map(En.normalizeUnit),s=e.valueOf()>this.valueOf(),o=function(e,t,n,r){let[i,s,o,a]=function(e,t,n){const r=[["years",(e,t)=>t.year-e.year],["quarters",(e,t)=>t.quarter-e.quarter+4*(t.year-e.year)],["months",(e,t)=>t.month-e.month+12*(t.year-e.year)],["weeks",(e,t)=>{const n=Wn(e,t);return(n-n%7)/7}],["days",Wn]],i={},s=e;let o,a;for(const[u,c]of r)n.indexOf(u)>=0&&(o=u,i[u]=c(e,t),a=s.plus(i),a>t?(i[u]--,(e=s.plus(i))>t&&(a=e,i[u]--,e=s.plus(i))):e=a);return[e,i,a,o]}(e,t,n);const u=t-i,c=n.filter((e=>["hours","minutes","seconds","milliseconds"].indexOf(e)>=0));0===c.length&&(o<t&&(o=i.plus({[a]:1})),o!==i&&(s[a]=(s[a]||0)+u/(o-i)));const l=En.fromObject(s,r);return c.length>0?En.fromMillis(u,r).shiftTo(...c).plus(l):l}(s?this:e,s?e:this,i,r);var a;return s?o.negate():o}diffNow(e="milliseconds",t={}){return this.diff(vr.now(),e,t)}until(e){return this.isValid?Dn.fromDateTimes(this,e):this}hasSame(e,t,n){if(!this.isValid)return!1;const r=e.valueOf(),i=this.setZone(e.zone,{keepLocalTime:!0});return i.startOf(t,n)<=r&&r<=i.endOf(t,n)}equals(e){return this.isValid&&e.isValid&&this.valueOf()===e.valueOf()&&this.zone.equals(e.zone)&&this.loc.equals(e.loc)}toRelative(e={}){if(!this.isValid)return null;const t=e.base||vr.fromObject({},{zone:this.zone}),n=e.padding?this<t?-e.padding:e.padding:0;let r=["years","months","days","hours","minutes","seconds"],i=e.unit;return Array.isArray(e.unit)&&(r=e.unit,i=void 0),kr(t,this.plus(n),{...e,numeric:"always",units:r,unit:i})}toRelativeCalendar(e={}){return this.isValid?kr(e.base||vr.fromObject({},{zone:this.zone}),this,{...e,numeric:"auto",units:["years","months","days"],calendary:!0}):null}static min(...e){if(!e.every(vr.isDateTime))throw new b("min requires all arguments be DateTimes");return Ge(e,(e=>e.valueOf()),Math.min)}static max(...e){if(!e.every(vr.isDateTime))throw new b("max requires all arguments be DateTimes");return Ge(e,(e=>e.valueOf()),Math.max)}static fromFormatExplain(e,t,n={}){const{locale:r=null,numberingSystem:i=null}=n;return Qn(pe.fromOpts({locale:r,numberingSystem:i,defaultToEN:!0}),e,t)}static fromStringExplain(e,t,n={}){return vr.fromFormatExplain(e,t,n)}static get DATE_SHORT(){return B}static get DATE_MED(){return N}static get DATE_MED_WITH_WEEKDAY(){return E}static get DATE_FULL(){return M}static get DATE_HUGE(){return D}static get TIME_SIMPLE(){return V}static get TIME_WITH_SECONDS(){return W}static get TIME_WITH_SHORT_OFFSET(){return z}static get TIME_WITH_LONG_OFFSET(){return F}static get TIME_24_SIMPLE(){return Z}static get TIME_24_WITH_SECONDS(){return L}static get TIME_24_WITH_SHORT_OFFSET(){return $}static get TIME_24_WITH_LONG_OFFSET(){return j}static get DATETIME_SHORT(){return Y}static get DATETIME_SHORT_WITH_SECONDS(){return q}static get DATETIME_MED(){return U}static get DATETIME_MED_WITH_SECONDS(){return _}static get DATETIME_MED_WITH_WEEKDAY(){return H}static get DATETIME_FULL(){return R}static get DATETIME_FULL_WITH_SECONDS(){return P}static get DATETIME_HUGE(){return J}static get DATETIME_HUGE_WITH_SECONDS(){return G}}function br(e){if(vr.isDateTime(e))return e;if(e&&e.valueOf&&He(e.valueOf()))return vr.fromJSDate(e);if(e&&"object"==typeof e)return vr.fromObject(e);throw new b(`Unknown datetime argument: ${e}, of type ${typeof e}`)}let Ir,Sr;function Tr(e){let t=0,n=0;document.querySelectorAll(".time-forecast").forEach((r=>{let i=e.forecast.forecastday[n].hour[t++].time;24==t&&(n=1,t=0);const s=vr.now().setZone(e.location.tz_id).toFormat("yyyy-MM-dd HH:mm");for(;s>i;)i=e.forecast.forecastday[n].hour[t++].time,24==t&&(n=1,t=0);var o;!function(e,t,n,r){let i;i=t.nextElementSibling,i.src=e.forecast.forecastday[r].hour[n].condition.icon,i=i.nextElementSibling,i=i.firstElementChild,"mph-f"!==Dr()?i.textContent=Math.round(e.forecast.forecastday[r].hour[n].temp_c):i.textContent=Math.round(e.forecast.forecastday[r].hour[n].temp_f)}(e,r,t,n),Dr(),r.textContent=(o=new Date(i),"mph-f"==Dr()?o.toLocaleTimeString([],{hour:"2-digit",minute:"2-digit",hour12:!0}):o.toLocaleTimeString([],{hour:"2-digit",minute:"2-digit",hour12:!1}))}))}function Or(e){let t=0;const n={weekday:"short",month:"long",day:"numeric"};document.querySelectorAll(".day-forecast").forEach((r=>{r.textContent=new Date(e.forecast.forecastday[t].date.replace(/-/g,"/")).toLocaleDateString("en-US",n),(r=r.nextElementSibling).src=e.forecast.forecastday[t].day.condition.icon,r=r.nextElementSibling.children[0].children[1],"mph-f"!==Dr()?r.textContent=Math.round(e.forecast.forecastday[t].day.mintemp_c):r.textContent=Math.round(e.forecast.forecastday[t].day.mintemp_f),r=r.parentElement.nextElementSibling.children[1],"mph-f"!==Dr()?r.textContent=Math.round(e.forecast.forecastday[t].day.maxtemp_c):r.textContent=Math.round(e.forecast.forecastday[t].day.maxtemp_f),t++}))}let Br="kph-c";async function Nr(e){try{const t=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=d884941f7f8e4303bfe14000241903&q=${e}&days=3&aqi=no&alerts=no`);if(!t.ok)throw new Error("Could not obtain Data.");return Sr=await t.json(),function(e){void 0!==Ir&&clearInterval(Ir),function(e){Ir=setInterval((()=>{let t=vr.now().setZone(e.location.tz_id);document.getElementById("current-time").textContent="kph-c"==Dr()?t.toFormat("HH:mm:ss"):t.toFormat("tt")}),500),document.getElementById("location").textContent=e.location.name,document.getElementById("current-time").textContent=void 0,document.getElementById("condition").textContent=e.current.condition.text,document.getElementById("condition-icon").src=e.current.condition.icon}(e),Mr(e)}(Sr),Er(),Sr}catch(e){return Er(),console.log(e)}}function Er(){document.querySelector(".info-container").classList.toggle("toggle"),document.querySelector(".loading-icon").classList.toggle("toggle")}function Mr(e){"mph-f"==Br?(document.getElementById("temperature").textContent=Math.round(e.current.temp_f),document.getElementById("wind").textContent=Math.round(e.current.wind_mph),document.getElementById("wind-unit").textContent="MPH",document.getElementById("temp-icon").src=A,Tr(e),Or(e)):(document.getElementById("temperature").textContent=Math.round(e.current.temp_c),document.getElementById("wind").textContent=Math.round(e.current.wind_kph),document.getElementById("wind-unit").textContent="KPH",document.getElementById("temp-icon").src=p,Tr(e),Or(e))}function Dr(){return Br}window.onload=e=>{document.querySelector(".loading-icon").classList.toggle("toggle"),Nr("los angeles")},document.getElementById("submit-btn").addEventListener("click",(e=>{e.preventDefault(),Nr(document.getElementById("search").value),Er()})),document.getElementById("unit-change").addEventListener("click",(e=>{e.preventDefault(),Br="mph-f"==Br?"kph-c":"mph-f",Mr(Sr)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,